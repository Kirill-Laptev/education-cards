{"version":3,"sources":["features/login/Login.module.css","features/registration/Registration.module.css","features/new-password/NewPassword.module.css","components/Header/Header.module.css","features/forgot-password/ForgotPassword.module.css","components/Paginator/Paginator.module.css","helpers/enum.ts","assets/img/enter.svg","redux/profile-reducer/profile-reducer.ts","api/api.ts","redux/login-reducer/login-reducer.ts","helpers/TextError.tsx","components/AlertPopup/AlertPopup.tsx","helpers/validators/validators.ts","features/login/Login.tsx","assets/img/note.svg","redux/registration-reducer/registration-reducer.ts","features/registration/Registration.tsx","components/Header/Header.tsx","redux/forgot-reducer/forgot-reducer.ts","assets/img/key.svg","features/forgot-password/ForgotPasswordForm.tsx","redux/password-reducer/password-reducer.ts","assets/img/rotation-lock.svg","features/new-password/NewPassword.tsx","features/profile/Profile.tsx","redux/app-reducer/app-reducer.ts","assets/img/preloader.svg","components/Preloader/Preloader.tsx","redux/packs-reducer/packs-reducer.ts","components/Paginator/Paginator.tsx","features/packs/Packs.tsx","app/App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["module","exports","SortRoute","initialState","setUserDataAC","userData","type","instance","axios","create","baseURL","withCredentials","loginAPI","post","data","delete","email","from","message","newPassData","packsAPI","paramsRequest","get","params","title","cardsPack","name","id","_id","put","isLoggedIn","error","setIsLoggedInAC","setErrorMessageAC","errorMessage","stylesError","position","bottom","right","fontSize","color","TextError","props","style","children","AlertPopup","serverRequestSuccess","useEffect","toast","toUpperCase","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","validateEmail","value","test","String","toLowerCase","LoginForm","useState","setEmail","password","setPassword","rememberMe","setRememberMe","emailTouched","setEmailTouched","passwordTouched","setPasswordTouched","emailError","setEmailError","passwordError","setPasswordError","isFormValid","setIsFormValid","dispatch","useDispatch","useSelector","state","login","serverErrorMessage","to","blurHandler","e","currentTarget","className","s","login__form","form","form__user","src","enterImg","onSubmit","formData","preventDefault","a","response","form__username","htmlFor","onChange","onBlur","form__password","length","form__remember","checked","form__forgot","form__registration","form__submit","disabled","isRegisterSuccess","setIsRegisterSuccessAC","isRegister","Registration","passwordConfirm","setPasswordConfirm","passwordConfirmTouched","setPasswordConfirmTouched","passwordConfirmError","setPasswordConfirmError","history","useHistory","registration","setTimeout","push","passwordValidation","setState","setError","passwordChangeHandler","form__header","noteImg","form__email","Header","header__block","header__logo","header__links","header__btns","onClick","info","setInfoAC","setErrorAC","ForgotPasswordForm","sendMessageSuccess","forgot","forgot__form","res","forgotPassTC","NewPassword","token","useParams","changePasswordSuccess","newPass__form","resetImg","resetPasswordToken","newPasswordTC","Profile","isAppInicialized","preloaderStyles","display","justifyContent","alignItems","width","height","Preloader","preloader","packs","packsTotalCount","requestParams","packName","min","max","sortPacks","page","pageCount","userId","updateRequestParamsAC","newParams","getPacksTC","getState","cardPacks","cardPacksTotalCount","Paginator","totalItemsCount","itemsOnPage","currentPage","onPageChanged","portionNumber","setPortionNumber","pagesCount","Math","ceil","pages","i","portionCount","leftPortionPageNumber","rightPortionPageNumber","btn__prev","filter","map","btn__active","btn","btn__next","Packs","searchName","setSearchName","setCurrentPage","responseData","columnsNames","accessor","Cell","original","row","marginRight","onPackDelete","onUpdatePack","columns","React","useMemo","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","deletePackTC","newTitle","UpdatePackTC","onSortClick","sortRoute","marginTop","border","paddingLeft","updateUp","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","nameUp","nameDown","countUp","countDown","updateDown","getRowProps","cells","cell","getCellProps","marginLeft","pageNumber","App","app","isInicialized","path","Login","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","profile","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.f410431a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__form\":\"Login_login__form__1eR2J\",\"form\":\"Login_form__3ARXm\",\"form__user\":\"Login_form__user__3maio\",\"form__username\":\"Login_form__username__vRFfB\",\"form__password\":\"Login_form__password__2-AQs\",\"form__remember\":\"Login_form__remember__Tcf-m\",\"form__forgot\":\"Login_form__forgot__3MwYm\",\"form__registration\":\"Login_form__registration__rebH_\",\"form__submit\":\"Login_form__submit__1zAwY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__form\":\"Registration_login__form__HaIXi\",\"form\":\"Registration_form__3PDko\",\"form__header\":\"Registration_form__header__34oh4\",\"form__email\":\"Registration_form__email__3VJM6\",\"form__password\":\"Registration_form__password__3BgCB\",\"form__submit\":\"Registration_form__submit__3KYHT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPass__form\":\"NewPassword_newPass__form__2AM1h\",\"form\":\"NewPassword_form__1xXZO\",\"form__header\":\"NewPassword_form__header__Bcsop\",\"form__password\":\"NewPassword_form__password__2V5l-\",\"form__submit\":\"NewPassword_form__submit__28XTl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header__block\":\"Header_header__block__2tjTw\",\"header__logo\":\"Header_header__logo__1ETZb\",\"header__links\":\"Header_header__links__3YLk3\",\"header__btns\":\"Header_header__btns__3jA7T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgot__form\":\"ForgotPassword_forgot__form__2beLg\",\"form\":\"ForgotPassword_form__1rcGm\",\"form__header\":\"ForgotPassword_form__header__2VQHG\",\"form__email\":\"ForgotPassword_form__email__3OKqH\",\"form__submit\":\"ForgotPassword_form__submit__kmCxW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn__active\":\"Paginator_btn__active__3wMHT\",\"btn\":\"Paginator_btn__28OSN\"};","export enum SortRoute {\n    nameUp = '0name',\n    nameDown = '1name',\n    countUp = '0cardsCount',\n    countDown = '1cardsCount',\n    updateUp = '0created',\n    updateDown = '1created'\n}","export default __webpack_public_path__ + \"static/media/enter.423cec00.svg\";","import { AuthResponseType } from '../../api/api';\n\nconst initialState = {} as AuthResponseType \n\nexport const profileReducer = (state = initialState, action: ProfileActionsType) => {\n    switch(action.type){\n\n        case 'SET_USER_PROFILE': \n            return {\n                ...state, \n                ...action.userData\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const setUserDataAC = (userData: AuthResponseType) => ({type: 'SET_USER_PROFILE', userData} as const)\n\n\n// types \nexport type SetUserDataActionType = ReturnType<typeof setUserDataAC>\n\nexport type ProfileActionsType = \n| SetUserDataActionType","import { GetPacksRequestType } from '../redux/packs-reducer/packs-reducer';\nimport axios from 'axios'\n\nconst settings = {\n    // baseURL: \"http://localhost:7542/2.0/\",\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\n    withCredentials: true\n}\n\nconst instance = axios.create(settings)\n\nexport const loginAPI = {\n    authMe: () => {\n        return instance.post<AuthResponseType>('auth/me')\n    },\n    registration: (data: { email: string, password: string }) => {\n        return instance.post<RegistrationResponseType>('auth/register', data)\n    },\n    logout: () => {\n        return instance.delete<MultiResponseType>('auth/me')\n    },\n    fetchLoginData: (data: { email: string, password: string, rememberMe: boolean }) => {\n        return instance.post<AuthResponseType>('auth/login', data)\n    },\n    forgotPass: (email: string) => {\n        return instance.post<MultiResponseType>('auth/forgot', {\n            email,\n            from: \"test-front-admin <ai73a@yandex.by>\",\n            message: `<div style=\"background-color: lime; padding: 15px\">\n                 password recovery link:\n                <a href='http://localhost:3000/#/set-new-password/$token$'>\n                 Reset Password</a></div>`\n        })\n    },\n    setNewPassword: (newPassData: NewPassDataType) => {\n        return instance.post<MultiResponseType>('auth/set-new-password', newPassData)\n    }\n}\n\n\nexport const packsAPI = {\n    getPacks: (paramsRequest: GetPacksRequestType) => {\n        return instance.get<PacksResponseType>('cards/pack', {params: paramsRequest})\n    },\n    // getPacks: (paramsRequest: GetPacksRequestType) => {\n    //     const {packName, min, max, sortPacks, page, pageCount, userId, token} = paramsRequest\n    //     return instance.get<PacksResponseType>(`cards/pack?packName=${packName}&sortPacks=${sortPacks}&min=${min}&max=${max}&page=${page}&pageCount=${pageCount}&user_id=${userId}`)\n    // },\n    addPack: (title: string) => {\n        return instance.post<OnPackActionResponseType>(`cards/pack`, {cardsPack: {name: title} })\n    },\n    deletePack: (id: string) => {\n        return instance.delete<OnPackActionResponseType>(`cards/pack?id=${id}`)\n    },\n    updatePack: (_id: string, name: string) => {\n        return instance.put<PacksResponseType>('cards/pack', {cardsPack: {_id, name}})\n    }\n}\n\n// export const cardsAPI = {\n//     getCards: (cardPackId: string, cardQuestion: string, cardAnswer: string, min?: number, max?: number, sortCards?: string,\n//                page?: number, pageCount?: number) => {\n//         return instance.get(`cards/card?pageCount=10&cardsPack_id=${cardPackId}\n//         &cardQuestion=${cardQuestion}&cardAnswer=${cardAnswer}&min=${min}&max=${max}&sortPacks=${sortCards}&page=${page}&pageCount=${pageCount}`)\n//     },\n//     addCards: (data: CardsType) => {\n//         return instance.post(`cards/pack`, data)\n//     },\n//     updateCard: (card: UpdateCardType) => {\n//         return instance.put(`cards/card`, {card})\n//     },\n//     deleteCard: (id: string) => {\n//         return instance.delete(`cards/card?id=${id}`)\n//     },\n// }\n\n// export const profileAPI = {\n//     updateProfile: (data: {name: string, avatar: string}) => {\n//         return instance.put('auth/me', data)\n//     },\n// }\n\n// types\n\nexport type RegistrationResponseType = {\n    addedUser: Object\n    error?: string\n}\n\nexport type AuthResponseType = {\n    _id: string;\n    email: string;\n    name: string;\n    avatar?: string;\n    publicCardPacksCount: number; // количество колод\n    created: Date;\n    updated: Date;\n    isAdmin: boolean;\n    verified: boolean; // подтвердил ли почту\t\n    rememberMe: boolean;\n    error?: string;\n    token: string\n    tokenDeathTime: number\n}\n\nexport type MultiResponseType = {\n    info: string,\n    error?: string\n}\n\nexport type UpdateProfileResponseType = {\n    updatedUser: Object,    // Поправить, посмотреть что прилетает с бэка\n    error?: string\n}\n\nexport type NewPassDataType = {\n    password: string\n    resetPasswordToken: string | undefined\n}\n\n// export type CardsType = {\n//     cardsPack_id: string,\n//     question?: string,\n//     answer?: string,\n//     grade?: number,\n//     shots?: number,\n//     rating?: number,\n//     answerImg?: string,\n//     questionImg?: string,\n//     questionVideo?: string,\n//     answerVideo?: string,\n//     type?: string\n// }\n\n// export type UpdateCardType = {\n//     _id: string\n//     question: string\n//     comments: string\n// }\n\nexport type PacksResponseType = {\n    cardPacks: Array<PacksType>\t\t\t\t\t\n    cardPacksTotalCount: number\t\t\n    maxCardsCount: number\t\t\t\n    minCardsCount: number\t\t\t\n    page: number\t\t\t\n    pageCount: number\t\n    token: string\n    tokenDeathTime: number\t\n}\n\nexport type PacksType = {\n    _id: string\t\t\n    user_id: string\t\t\t\n    name: string\t\t\t\n    path: string\t\t\t\t\n    cardsCount: 25\t\t\t\n    grade: number\t\t\n    shots: number\n    rating: number\n    type: string\t\n    created: string\t\t\t\t\n    updated: string\t\t\t\n    __v: number\t\t\t\n}\n\nexport type OnPackActionResponseType = {\n    newCardsPack: {\n        cardsCount: number                         \n        created: string\n        grade: number \n        more_id: string\n        name: string\n        path: string\n        private: boolean\n        rating: number \n        shots: number \n        type: string\n        updated: string\n        user_id: string\n        user_name: string\n        __v: number \n        _id: string\n    }   \n    token: string\n    tokenDeathTime: number \n}","import { setUserDataAC, SetUserDataActionType } from './../profile-reducer/profile-reducer';\nimport { AppRootStateType } from './../store';\nimport { loginAPI } from '../../api/api';\nimport { ThunkDispatch, ThunkAction } from 'redux-thunk';\n\nconst initialState: InitialStateType = {\n    isLoggedIn: false,\n    error: ''\n}\n\nexport const loginReducer = (state: InitialStateType = initialState, action: LoginActionsType) => {\n    switch(action.type){\n\n        case 'SET_IS_LOGGED_IN':\n            return {\n                ...state,\n                isLoggedIn: action.isLoggedIn\n            }\n\n        case 'SET_ERROR_MESSAGE':\n            return {\n                ...state,\n                error: action.errorMessage\n            }\n\n        default:\n            return state\n    }\n}\n\n\n// actions\nexport const setIsLoggedInAC = (isLoggedIn: boolean) => ({type: 'SET_IS_LOGGED_IN', isLoggedIn} as const)\nexport const setErrorMessageAC = (errorMessage: string) => ({type: 'SET_ERROR_MESSAGE', errorMessage} as const)\n\n\n// thunks\nexport const loginTC = (formData: {email: string, password: string, rememberMe: boolean}): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            const {data} = await loginAPI.fetchLoginData(formData)\n            dispatch(setUserDataAC(data))\n            dispatch(setIsLoggedInAC(true))\n        }\n        catch(e){\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\nexport const logoutTC = (): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            await loginAPI.logout()\n            dispatch(setIsLoggedInAC(false))\n        }\n        catch(e){\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\n\n// types\ntype InitialStateType = {\n    isLoggedIn: boolean,\n    error: string\n}\n\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\n\nexport type LoginActionsType = \n| SetIsLoggedInActionType\n| ReturnType<typeof setErrorMessageAC>\n| SetUserDataActionType\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, LoginActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, LoginActionsType>\n","import React from 'react'\n\ninterface ITextErrorPropsType {\n    children?: React.ReactNode\n}\n\nconst stylesError = {\n    position: 'absolute' as const,\n    bottom: '-19px',\n    right: '0',\n    fontSize: '14px',\n    color: 'red'\n}\n\nexport const TextError: React.FC<ITextErrorPropsType> = (props) => {\n    return (\n        <div style={stylesError}>\n            {props.children}\n        </div>\n    )\n}","import React, { useEffect } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst AlertPopup: React.FC<ErrorPopupPropsType> = ({message, serverRequestSuccess}) => {\n\n    const viewMessage = () => {\n        if(message === 'user not found /ᐠ-ꞈ-ᐟ\\\\') return 'user not found'\n        if(message === 'not correct password /ᐠ-ꞈ-ᐟ\\\\') return 'not correct password'\n        if(message === 'not valid email/password /ᐠ-ꞈ-ᐟ\\\\') return 'not valid email/password'\n        if(message === 'email already exists /ᐠ｡ꞈ｡ᐟ\\\\') return 'that username is taken'\n        if(message === 'Email address not found /ᐠ-ꞈ-ᐟ\\\\') return 'email adress not found'\n        if(message === 'no resetPasswordToken, Check your request! /ᐠ-ꞈ-ᐟ\\\\') return 'please check your email and click on recovery link'\n        if(message === 'not your CardsPack! /ᐠ｡ꞈ｡ᐟ\\\\') return 'not your cards pack'\n        return 'server error'\n    }\n\n\n    // Без useEffect попап всплывает 2 раза\n    useEffect(() => {\n        if(message){\n            toast(viewMessage().toUpperCase())\n        }\n        if(serverRequestSuccess){\n            toast('success ✔️'.toUpperCase())\n        }\n    }, [message, serverRequestSuccess])\n  \n    return (\n        <div>\n            <ToastContainer  \n            position=\"bottom-right\"\n            autoClose={4000}\n            hideProgressBar\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover/>\n        </div>\n    )\n}\n\nexport default AlertPopup\n\n// types\ntype ErrorPopupPropsType = {\n    message?: string\n    serverRequestSuccess?: boolean | string\n}","export const validateEmail = (value: string) => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return !re.test(String(value).toLowerCase())\n}","import React, { useState, FocusEvent, useEffect } from 'react'\nimport enterImg from '../../assets/img/enter.svg'\nimport s from './Login.module.css'\nimport { NavLink, Redirect, useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loginTC } from '../../redux/login-reducer/login-reducer'\nimport { AppRootStateType } from '../../redux/store'\nimport { TextError } from '../../helpers/TextError'\nimport AlertPopup from '../../components/AlertPopup/AlertPopup'\nimport { validateEmail } from '../../helpers/validators/validators'\n\n\nconst LoginForm: React.FC = () => {\n\n    const [email, setEmail] = useState<string>('')\n    const [password, setPassword] = useState<string>('')\n    const [rememberMe, setRememberMe] = useState<boolean>(false)\n    const [emailTouched, setEmailTouched] = useState<boolean>(false)\n    const [passwordTouched, setPasswordTouched] = useState<boolean>(false)\n    const [emailError, setEmailError] = useState<string>('Email field is required')\n    const [passwordError, setPasswordError] = useState<string>('Password is required')\n    const [isFormValid, setIsFormValid] = useState<boolean>(false)\n\n    const dispatch = useDispatch()\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n    const serverErrorMessage = useSelector<AppRootStateType, string>((state) => state.login.error)\n\n    useEffect(() => {\n        if(emailError || passwordError){\n            setIsFormValid(false)\n        } else{\n            setIsFormValid(true)\n        }\n    }, [emailError, passwordError])\n\n    if(isLoggedIn){\n        return <Redirect to='/profile'/>\n    }\n\n    const emailChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(e.currentTarget.value)\n\n        const isValidEmail = validateEmail(e.currentTarget.value)\n        if (isValidEmail) {\n            setEmailError('Incorrect email format')\n            if(!e.currentTarget.value){\n                setEmailError('Email field is required')\n            }\n        } else {\n            setEmailError('') \n        }\n    }\n    const passwordChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setPassword(e.currentTarget.value)\n        if(e.currentTarget.value.length < 7){\n            setPasswordError('Min length 7 symbols')\n            if(!e.currentTarget.value){\n                setPasswordError('Password is required')\n            }\n        } else{\n            setPasswordError('')\n        }\n    }\n    const remeberMeChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setRememberMe(e.currentTarget.checked)\n    }\n\n\n    const blurHandler = (e: FocusEvent<HTMLInputElement>) => {\n        if(e.currentTarget.name === 'email'){\n            setEmailTouched(true)\n        }\n        if(e.currentTarget.name === 'password'){\n            setPasswordTouched(true)\n        }\n    }\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault()\n        dispatch(loginTC({email, password, rememberMe}))\n    }\n\n    return (\n        <>\n            <div className={s.login__form}>\n                <div className={s.form}>\n                    <div className={s.form__user}>\n                        <div>SIGN IN</div>\n                        <img src={enterImg} />\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className={s.form__username}>\n                            <div><label htmlFor='email'>username</label></div>\n                            <input \n                            type='text' \n                            id='email' \n                            name='email' \n                            value={email}\n                            onChange={emailChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(emailError && emailTouched) && <TextError>{emailError}</TextError>}\n                        </div>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='password'>password</label></div>\n                            <input \n                            type='password' \n                            id='password' \n                            name='password' \n                            value={password}\n                            onChange={passwordChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(passwordError && passwordTouched) && <TextError>{passwordError}</TextError>}\n                        </div>\n                        <div className={s.form__remember}>\n                            <div><label htmlFor='rememberMe'>remember me</label></div>\n                            <input \n                            type='checkbox' \n                            id='rememberMe' \n                            name='rememberMe' \n                            checked={rememberMe}\n                            onChange={remeberMeChangeHandler}/>\n                        </div>\n                        <div className={s.form__forgot}><NavLink to='/forgotpassword'>Forgot password ?</NavLink></div>\n                        <div className={s.form__registration}><NavLink to='/registration'>Registration here</NavLink></div>\n                        <div className={s.form__submit}>\n                            <button type='submit' disabled={!isFormValid}>Login</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <AlertPopup message={serverErrorMessage} serverRequestSuccess={isLoggedIn}/>\n        </>\n    )\n}\n\n\n\nexport default LoginForm\n","export default __webpack_public_path__ + \"static/media/note.129a606a.svg\";","import { loginAPI } from '../../api/api';\nimport { AppRootStateType } from './../store';\nimport { ThunkDispatch, ThunkAction } from \"redux-thunk\"\n\nconst initialState: InitialStateType = {\n    isRegisterSuccess: false,\n    error: ''\n}\n\nexport const registrationReducer = (state: InitialStateType = initialState, action: RegistrationActionsType) => {\n    switch(action.type){\n        case 'SET_IS_REGISTER_SUCCESS':\n            return {\n                ...state,\n                isRegisterSuccess: action.isRegister\n            }\n\n        case 'SET_ERROR_MESSAGE':\n            return {\n                ...state,\n                error: action.errorMessage\n            }\n\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setIsRegisterSuccessAC = (isRegister: boolean) => ({type: 'SET_IS_REGISTER_SUCCESS', isRegister} as const)\nexport const setErrorMessageAC = (errorMessage: string) => ({type: 'SET_ERROR_MESSAGE', errorMessage} as const)\n\n// thunks\nexport const registrationTC = (data: {email: string, password: string}): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            await loginAPI.registration(data)\n            dispatch(setIsRegisterSuccessAC(true))\n        } catch(e){\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\n\n// types\ntype InitialStateType = {\n    isRegisterSuccess: boolean,\n    error: string\n}\n\nexport type RegistrationActionsType = \n| ReturnType<typeof setIsRegisterSuccessAC>\n| ReturnType<typeof setErrorMessageAC>\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, RegistrationActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, RegistrationActionsType>\n","import React, { useState, FocusEvent, useEffect } from 'react'\nimport noteImg from '../../assets/img/note.svg'\nimport s from './Registration.module.css'\nimport { Redirect, useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppRootStateType } from '../../redux/store'\nimport { TextError } from '../../helpers/TextError'\nimport AlertPopup from '../../components/AlertPopup/AlertPopup'\nimport { registrationTC, setIsRegisterSuccessAC } from '../../redux/registration-reducer/registration-reducer'\nimport { validateEmail } from '../../helpers/validators/validators'\n\n\nconst Registration: React.FC = () => {\n\n    const [email, setEmail] = useState<string>('')\n    const [password, setPassword] = useState<string>('')\n    const [passwordConfirm, setPasswordConfirm] = useState<string>('')\n    const [emailTouched, setEmailTouched] = useState<boolean>(false)\n    const [passwordTouched, setPasswordTouched] = useState<boolean>(false)\n    const [passwordConfirmTouched, setPasswordConfirmTouched] = useState<boolean>(false)\n    const [emailError, setEmailError] = useState<string>('Email field is required')\n    const [passwordError, setPasswordError] = useState<string>('Password is required')\n    const [passwordConfirmError, setPasswordConfirmError] = useState<string>('Password is required')\n    const [isFormValid, setIsFormValid] = useState<boolean>(false)\n\n    useEffect(() => {\n        if(emailError || passwordError || passwordConfirmError){\n            setIsFormValid(false)\n        } else {\n            setIsFormValid(true)\n        }\n    }, [emailError, passwordError, passwordConfirmError])\n\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const isRegisterSuccess = useSelector<AppRootStateType, boolean>((state) => state.registration.isRegisterSuccess)\n    const serverErrorMessage = useSelector<AppRootStateType, string>((state) => state.registration.error)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n\n    useEffect(() => {\n        if(isRegisterSuccess) {\n            setTimeout(() => {\n                history.push('/login')\n                dispatch(setIsRegisterSuccessAC(false))\n            }, 3000)\n        }    \n    }, [isRegisterSuccess])\n\n\n    if(isLoggedIn){\n        return <Redirect to='/profile'/>\n    }\n\n\n    const emailChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(e.currentTarget.value)\n\n        const isValidEmail = validateEmail(e.currentTarget.value)\n        if (isValidEmail) {\n            setEmailError('Incorrect email format')\n            if(!e.currentTarget.value){\n                setEmailError('Email field is required')\n            }\n        } else {\n            setEmailError('')  \n        }\n    }\n\n    const passwordValidation = (password: string, setState: Function, setError: Function) => {\n        setState(password)\n        if(password.length < 7){\n            setError('Min length 7 symbols')\n            if(!password){\n                setError('Password is required')\n            }\n        } else{\n            setError('')\n        }\n    }\n\n    const passwordChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if(e.currentTarget.name === 'password'){\n            passwordValidation(e.currentTarget.value, setPassword, setPasswordError)\n        }\n        if(e.currentTarget.name === 'passwordConfirm'){\n            passwordValidation(e.currentTarget.value, setPasswordConfirm, setPasswordConfirmError)\n        }\n    }\n \n\n    const blurHandler = (e: FocusEvent<HTMLInputElement>) => {\n        if(e.currentTarget.name === 'email'){\n            setEmailTouched(true)\n        }\n        if(e.currentTarget.name === 'password'){\n            setPasswordTouched(true)\n        }\n        if(e.currentTarget.name === 'passwordConfirm'){\n            setPasswordConfirmTouched(true)\n        }\n    }\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault()\n        if(password !== passwordConfirm){\n            setPasswordConfirmError('Different passwords')\n        } else {\n            dispatch(registrationTC({email, password}))\n        }\n    }\n\n    return (\n        <>\n            <div className={s.login__form}>\n                <div className={s.form}>\n                    <div className={s.form__header}>\n                        <div>REGISTRATION</div>\n                        <img src={noteImg}/>\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className={s.form__email}>\n                            <div><label htmlFor='email'>email</label></div>\n                            <input \n                            type='text' \n                            id='email' \n                            name='email' \n                            value={email}\n                            onChange={emailChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(emailError && emailTouched) && <TextError>{emailError}</TextError>}\n                        </div>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='password'>password</label></div>\n                            <input \n                            type='password' \n                            id='password' \n                            name='password' \n                            value={password}\n                            onChange={passwordChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(passwordError && passwordTouched) && <TextError>{passwordError}</TextError>}\n                        </div>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='passwordConfirm'>confirm password</label></div>\n                            <input \n                            type='password' \n                            id='passwordConfirm' \n                            name='passwordConfirm' \n                            value={passwordConfirm}\n                            onChange={passwordChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(passwordConfirmError && passwordConfirmTouched) && <TextError>{passwordConfirmError}</TextError>}\n                        </div>\n                        <div className={s.form__submit}>\n                            <button type='submit' disabled={!isFormValid}>Sign up</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <AlertPopup message={serverErrorMessage} serverRequestSuccess={isRegisterSuccess}/>\n        </>\n    )\n}\n\n\n\nexport default Registration\n\n","import React from 'react'\nimport s from './Header.module.css'\nimport { NavLink, Redirect } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { logoutTC } from '../../redux/login-reducer/login-reducer'\nimport { AppRootStateType } from '../../redux/store'\n\nconst Header = () => {\n\n    const isLoggedIn = useSelector<AppRootStateType>((state) => state.login.isLoggedIn)\n    const dispatch = useDispatch()\n\n    const logout = () => {\n        dispatch(logoutTC())\n    }\n\n    const login = () => {\n        return <Redirect to='/login'/>\n    }\n\n    return (\n        <div>\n            <div className={s.header__block}>\n                <div className={s.header__logo}>LOGO</div>\n                <div className={s.header__links}>\n                    <NavLink to='/login'>Login</NavLink>\n                    <NavLink to='/registration'>Registration</NavLink>\n                    <NavLink to='/profile'>Profile</NavLink>\n                    <NavLink to='/newpassword'>New Password</NavLink>\n                    <NavLink to='/forgotpassword'>Forgot Password</NavLink>\n                    <NavLink to='/packs'>Packs</NavLink>\n                </div>\n                {isLoggedIn\n                  ? <div className={s.header__btns}><button onClick={logout}>Log out</button></div>\n                  : <div className={s.header__btns}><button onClick={login}>Login</button></div>}\n                \n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppRootStateType} from \"../store\";\nimport {loginAPI} from \"../../api/api\";\n\nconst initialState: InitialForgotStateType = {\n    info: '',\n    error: ''\n}\n\nexport const forgotReducer = (state = initialState, action: ForgotPassActionsType): InitialForgotStateType => {\n    switch (action.type) {\n\n        case 'forgot/SET_INFO': \n            return {\n                ...state,\n                info: action.info\n            }\n\n        case 'forgot/SET_ERROR': \n            return {\n                ...state,\n                error: action.error\n            }\n\n        default:\n            return state\n    }\n}\n\n\n//actions\nexport const setInfoAC = (info: string) => ({type: 'forgot/SET_INFO',  info} as const)\nexport const setErrorAC = (error: string) => ({type: 'forgot/SET_ERROR', error} as const)\n\n//thunks\nexport const forgotPassTC = (email: string): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            const res = await loginAPI.forgotPass(email)\n            dispatch(setInfoAC(res.data.info))\n        } catch(e){\n            dispatch(setErrorAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorAC(''))\n        }\n    }\n}\n\n\n//types\nexport type InitialForgotStateType = {\n    info: string\n    error: string\n}\nexport type ForgotPassActionsType = \n| ReturnType<typeof setInfoAC>\n| ReturnType<typeof setErrorAC>\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, ForgotPassActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ForgotPassActionsType>\n","export default __webpack_public_path__ + \"static/media/key.4ca8f8c2.svg\";","import React, {FocusEvent, useEffect, useState} from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Redirect, useHistory} from 'react-router-dom';\nimport {forgotPassTC, setInfoAC} from '../../redux/forgot-reducer/forgot-reducer';\nimport {AppRootStateType} from \"../../redux/store\";\nimport s from \"../forgot-password/ForgotPassword.module.css\";\nimport {TextError} from \"../../helpers/TextError\";\nimport forgot from \"../../assets/img/key.svg\";\nimport AlertPopup from '../../components/AlertPopup/AlertPopup';\nimport { validateEmail } from '../../helpers/validators/validators';\n\n\nconst ForgotPasswordForm = () => {\n\n    const [email, setEmail] = useState<string>('')\n    const [emailTouched, setEmailTouched] = useState<boolean>(false)\n    const [emailError, setEmailError] = useState<string>('Email field is required')\n    const [isFormValid, setIsFormValid] = useState<boolean>(false)\n\n    const sendMessageSuccess = useSelector<AppRootStateType, string>((state) => state.forgot.info)\n    const serverErrorMessage = useSelector<AppRootStateType, string>((state) => state.forgot.error)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        if (emailError) {\n            setIsFormValid(false)\n        } else{\n            setIsFormValid(true)\n        }\n    }, [emailError])\n\n    useEffect(() => {\n        if(sendMessageSuccess){\n            setTimeout(() => {\n                history.push('/login')\n                dispatch(setInfoAC(''))\n            }, 3000)\n        }    \n    }, [sendMessageSuccess])\n\n    \n    if(isLoggedIn){\n        return <Redirect to='/profile'/>\n    }\n\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault()\n        dispatch(forgotPassTC(email))\n    }\n\n    const emailChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(e.currentTarget.value)\n        \n        const isValidEmail = validateEmail(e.currentTarget.value)\n        if (isValidEmail) {\n            setEmailError('Incorrect email format')\n            if (!e.currentTarget.value) {\n                setEmailError('Email field is required')\n            }\n        } else {\n            setEmailError('')\n        }\n    }\n\n    const blurHandler = (e: FocusEvent<HTMLInputElement>) => {\n        if (e.currentTarget.name === 'email') {\n            setEmailTouched(true)\n        }\n    }\n    \n\n    return (\n        <>\n            <div className={s.forgot__form}>\n                <div className={s.form}>\n                    <div className={s.form__header}>\n                        <div>Forgot Password</div>\n                        <img src={forgot}/>\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className={s.form__email}>\n                            <div><label htmlFor='email'>Enter valid email</label></div>\n                            <input\n                                type='text'\n                                id='email'\n                                name='email'\n                                value={email}\n                                onChange={emailChangeHandler}\n                                onBlur={blurHandler}/>\n                            {(emailError && emailTouched) && <TextError>{emailError}</TextError>}\n                        </div>\n                        <div className={s.form__submit}>\n                            <button type='submit' disabled={!isFormValid}>Send</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <AlertPopup message={serverErrorMessage} serverRequestSuccess={sendMessageSuccess}/>\n            {/* Email address not found /ᐠ-ꞈ-ᐟ\\\\ */}\n            {/* sent —ฅ/ᐠ.̫ .ᐟ\\\\ฅ— */}\n        </>\n\n    )\n}\n\n\nexport default ForgotPasswordForm\n\n","import {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppRootStateType} from \"../store\";\nimport {loginAPI} from \"../../api/api\";\n\n\nconst initialState: InitialSetNewPassType = {\n    info: '',\n    error: ''\n}\n\n\nexport const passwordReducer = (state = initialState, action: PasswordActionsType): InitialSetNewPassType => {\n    switch (action.type) {\n\n        case 'password/SET_INFO': \n            return {\n                ...state,\n                info: action.info\n            }\n\n        case 'password/SET_ERROR': \n            return {\n                ...state,\n                error: action.error\n            }\n\n        default:\n            return state\n    }\n}\n\n\n//actions\nconst setInfoAC = (info: string) => ({type: 'password/SET_INFO', info} as const)\nconst setErrorAC = (error: string) => ({type: 'password/SET_ERROR', error} as const)\n\n//thunks\nexport const newPasswordTC = (password: string, resetPasswordToken: string | undefined): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            const res = await loginAPI.setNewPassword({password, resetPasswordToken})\n            dispatch(setInfoAC(res.data.info))\n        } catch(e){\n            dispatch(setErrorAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorAC(''))\n        }\n    }\n}\n\n\n//types\nexport type InitialSetNewPassType = {\n    info: string\n    error: string\n}\nexport type PasswordActionsType = \n| ReturnType<typeof setInfoAC>\n| ReturnType<typeof setErrorAC>\n\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, PasswordActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, PasswordActionsType>\n","export default __webpack_public_path__ + \"static/media/rotation-lock.fb2f4187.svg\";","import React, {FocusEvent, useEffect, useState} from 'react'\nimport s from './NewPassword.module.css'\nimport {useHistory, useParams, Redirect} from 'react-router-dom'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../redux/store'\nimport {TextError} from '../../helpers/TextError'\nimport AlertPopup from '../../components/AlertPopup/AlertPopup'\nimport {newPasswordTC} from \"../../redux/password-reducer/password-reducer\";\nimport resetImg from './../../../src/assets/img/rotation-lock.svg'\nimport { setInfoAC } from '../../redux/forgot-reducer/forgot-reducer'\n\nconst NewPassword: React.FC = () => {\n\n    const [password, setPassword] = useState<string>('')\n    const [passwordConfirm, setPasswordConfirm] = useState<string>('')\n    const [passwordTouched, setPasswordTouched] = useState<boolean>(false)\n    const [passwordConfirmTouched, setPasswordConfirmTouched] = useState<boolean>(false)\n    const [passwordError, setPasswordError] = useState<string>('Password is required')\n    const [passwordConfirmError, setPasswordConfirmError] = useState<string>('Password is required')\n    const [isFormValid, setIsFormValid] = useState<boolean>(false)\n    const {token} = useParams<{ token?: string }>()\n\n    const changePasswordSuccess = useSelector<AppRootStateType, string>((state) => state.password.info)\n    const serverErrorMessage = useSelector<AppRootStateType, string>((state) => state.password.error)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        if (passwordError || passwordConfirmError) {\n            setIsFormValid(false)\n        } else {\n            setIsFormValid(true)\n        }\n    }, [passwordError, passwordConfirmError])\n\n\n    useEffect(() => {\n        if (changePasswordSuccess) {\n            setTimeout(() => {\n                history.push('/login')\n                dispatch(setInfoAC(''))\n            }, 3000)\n        }\n    }, [changePasswordSuccess])\n\n\n    if(isLoggedIn){\n        return <Redirect to='/profile'/>\n    }\n\n\n    const passwordValidation = (password: string, setState: Function, setError: Function) => {\n        setState(password)\n        if (password.length < 7) {\n            setError('Min length 7 symbols')\n            if (!password) {\n                setError('Password is required')\n            }\n        } else {\n            setError('')\n        }\n    }\n\n    const passwordChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget.name === 'password') {\n            passwordValidation(e.currentTarget.value, setPassword, setPasswordError)\n        }\n        if (e.currentTarget.name === 'passwordConfirm') {\n            passwordValidation(e.currentTarget.value, setPasswordConfirm, setPasswordConfirmError)\n        }\n    }\n\n\n    const blurHandler = (e: FocusEvent<HTMLInputElement>) => {\n\n        if (e.currentTarget.name === 'password') {\n            setPasswordTouched(true)\n        }\n        if (e.currentTarget.name === 'passwordConfirm') {\n            setPasswordConfirmTouched(true)\n        }\n    }\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault()\n        if (password !== passwordConfirm) {\n            setPasswordConfirmError('Different passwords')\n        } else {\n            dispatch(newPasswordTC(password, token))\n        }\n    }\n\n\n    return (\n        <>\n            <div className={s.newPass__form}>\n                <div className={s.form}>\n                    <div className={s.form__header}>\n                        <div>Set New Password</div>\n                        <img src={resetImg}/>\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='password'>password</label></div>\n                            <input\n                                type='password'\n                                id='password'\n                                name='password'\n                                value={password}\n                                onChange={passwordChangeHandler}\n                                onBlur={blurHandler}/>\n                            {(passwordError && passwordTouched) && <TextError>{passwordError}</TextError>}\n                        </div>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='passwordConfirm'>confirm password</label></div>\n                            <input\n                                type='password'\n                                id='passwordConfirm'\n                                name='passwordConfirm'\n                                value={passwordConfirm}\n                                onChange={passwordChangeHandler}\n                                onBlur={blurHandler}/>\n                            {(passwordConfirmError && passwordConfirmTouched) &&\n                            <TextError>{passwordConfirmError}</TextError>}\n                        </div>\n                        <div className={s.form__submit}>\n                            <button type='submit' disabled={!isFormValid}>Set New Password</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <AlertPopup message={serverErrorMessage} serverRequestSuccess={changePasswordSuccess}/>   \n        </>\n    )\n}\n\n\nexport default NewPassword\n\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppRootStateType } from '../../redux/store'\nimport { Redirect } from 'react-router-dom'\n\nconst Profile = () => {\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n\n    if(!isLoggedIn){\n        return <Redirect to='/login'/>\n    }\n\n    return (\n        <div>\n            Profile Component\n        </div>\n    )\n}\n\nexport default Profile\n","import { setIsLoggedInAC, SetIsLoggedInActionType } from './../login-reducer/login-reducer';\nimport {setUserDataAC, SetUserDataActionType} from './../profile-reducer/profile-reducer';\nimport { loginAPI } from '../../api/api';\nimport { AppRootStateType } from './../store';\nimport { ThunkDispatch, ThunkAction } from \"redux-thunk\"\n\n\nconst initialState: InitialStateType = {\n    isAppInicialized: false,\n    error: ''\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType) => {\n    switch(action.type){\n        case 'app/SET_APP_INICIALIZED': \n            return {\n                ...state,\n                isAppInicialized: action.isInicialized\n            }\n        \n        case 'app/SET_ERROR_MESSAGE': {\n            return {\n                ...state,\n                error: action.errorMessage\n            }\n        }\n\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setAppInicializedAC = (isInicialized: boolean) => ({type: 'app/SET_APP_INICIALIZED', isInicialized} as const)\nexport const setErrorMessageAC = (errorMessage: string) => ({type: 'app/SET_ERROR_MESSAGE', errorMessage} as const)\n\n// thunks\nexport const appInicializeTC = (): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            const res = await loginAPI.authMe()\n            dispatch(setUserDataAC(res.data))\n            dispatch(setIsLoggedInAC(true))\n        } catch(e){\n            dispatch(setErrorMessageAC('Please, authorized'))  \n        } finally{\n            dispatch(setAppInicializedAC(true))\n        }\n    }\n}\n\n// types\ntype InitialStateType = {\n    isAppInicialized: boolean\n    error: string\n}\n\nexport type AppActionsType = \n| ReturnType<typeof setAppInicializedAC>\n| ReturnType<typeof setErrorMessageAC>\n| SetUserDataActionType\n| SetIsLoggedInActionType\n\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, AppActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, AppActionsType>","export default __webpack_public_path__ + \"static/media/preloader.8d5bc12c.svg\";","import React from 'react'\nimport preloader from '../../assets/img/preloader.svg'\n\nconst preloaderStyles = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    height: '100vh'\n}\n\nconst Preloader: React.FC = () => {\n    return (\n        <div style={preloaderStyles}>\n            <div><img src={preloader} /></div>\n        </div>\n    )\n}\n\nexport default Preloader\n","import { AppRootStateType } from './../store';\nimport { PacksType } from '../../api/api';\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {packsAPI} from \"../../api/api\";\n\n\nconst initialState: InitialState = {\n    packs: [],\n    packsTotalCount: 0,\n    error: '',\n    requestParams: {\n        packName: '',\n        min: 0,\n        max: 0,\n        sortPacks: '0updated',\n        page: 1,\n        pageCount: 10,\n        userId: '',\n        // token: ''\n    }\n}\n\nexport const packsReducer = (state = initialState, action: PacksActionsType): InitialState => {\n    switch (action.type) {\n\n        case 'packs/SET_PACKS':\n            return {\n                ...state,\n                packs: action.packs,\n                packsTotalCount: action.cardPacksTotalCount\n            }\n\n        case 'packs/SET_ERROR_MESSAGE':\n            return {\n                ...state,\n                error: action.errorMessage\n            }\n\n        case 'packs/UPDATE_PARAMS_REQUEST':\n            return {\n                ...state,\n                requestParams: {...state.requestParams, ...action.newParams}\n            }\n\n        default:\n            return state\n    }\n}\n\n\n//actions\nexport const setPacksAC = (packs: Array<PacksType>, cardPacksTotalCount: number) => {\n    return {type: 'packs/SET_PACKS' as const, packs, cardPacksTotalCount}\n} \n\nconst setErrorMessageAC = (errorMessage: string) => ({type: 'packs/SET_ERROR_MESSAGE', errorMessage} as const)\n\nexport const updateRequestParamsAC = (newParams: GetPacksRequestType) => ({type: 'packs/UPDATE_PARAMS_REQUEST', newParams} as const)\n\n// export const setNameAC = (name: string) => ({type: 'packs/SET_NAME_PACK', name} as const)\n\n//thunks\nexport const getPacksTC = (params: GetPacksRequestType): ThunkType => {\n    return async (dispatch: DispatchType, getState: () => AppRootStateType) => {\n        try {\n            dispatch(updateRequestParamsAC(params))\n            const newParams = getState().packs.requestParams\n            const res = await packsAPI.getPacks(newParams)\n            dispatch(setPacksAC(res.data.cardPacks, res.data.cardPacksTotalCount))\n        } catch (e) {\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\nexport const addNewPackTC = (title: string, params: GetPacksRequestType): ThunkType => {\n    return async (dispatch: DispatchType, getState: () => AppRootStateType) => {\n        try {\n            dispatch(updateRequestParamsAC(params))\n            await packsAPI.addPack(title)\n            dispatch(getPacksTC(getState().packs.requestParams))\n        } catch (e) {\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\nexport const deletePackTC = (id: string): ThunkType => {\n    return async (dispatch: DispatchType, getState: () => AppRootStateType) => {\n        try {\n            await packsAPI.deletePack(id)\n            dispatch(getPacksTC(getState().packs.requestParams))\n        } catch (e) {\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\nexport const UpdatePackTC = (_id: string, newTitle: string): ThunkType => {\n    return async (dispatch: DispatchType, getState: () => AppRootStateType) => {\n        try {\n            await packsAPI.updatePack(_id, newTitle)\n            dispatch(getPacksTC(getState().packs.requestParams))\n        } catch (e) {\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\n\n\n//types\ntype InitialState = {\n    packs: Array<PacksType>\n    packsTotalCount: number\n    error: string\n    requestParams: GetPacksRequestType\n}\n\nexport type PacksActionsType =\n| ReturnType<typeof setPacksAC>\n| ReturnType<typeof setErrorMessageAC>\n| ReturnType<typeof updateRequestParamsAC>\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, PacksActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, PacksActionsType>\n\n\nexport type GetPacksRequestType = {\n    packName?: string\n    min?: number\n    max?: number\n    sortPacks?: string   //0name, 1name, \n    page?: number\n    pageCount?: number\n    userId?: string\n    token?: string\n}\n\n\n\n\n\n\n// type CardsType = {\n//     cardsCount: number\n//     created: string\n//     deckCover: null\n//     grade: number\n//     more_id: string\n//     name: string\n//     path: string\n//     private: boolean\n//     rating: number\n//     shots: number\n//     type: string\n//     updated: string\n//     user_id: string\n//     user_name: string\n// }","import React, { useState } from 'react'\nimport s from './Paginator.module.css'\n\nconst Paginator: React.FC<PaginatorPropsType> = ({totalItemsCount, itemsOnPage, currentPage, onPageChanged}) => {\n\n    const [portionNumber, setPortionNumber] = useState(1)\n\n    const pagesCount = Math.ceil(totalItemsCount/itemsOnPage)\n\n    const pages = []\n\n    for(let i = 1; i <= pagesCount; i++){\n        pages.push(i)\n    }\n\n    const portionCount = Math.ceil(pagesCount/10) // Количество порций отображаемых страниц по 10\n\n    const leftPortionPageNumber = (portionNumber - 1) * 10 + 1\n    const rightPortionPageNumber = portionNumber * 10\n\n    return (\n        <div>\n            {portionNumber > 1\n            ? <button onClick={() => setPortionNumber(portionNumber - 1)} className={s.btn__prev}>PREV</button>  // Только если у нас номер порции больше 1 - показываем кнопку влево\n            : ''}\n\n            {pages\n            .filter((page) => page >= leftPortionPageNumber && page <= rightPortionPageNumber ) // Делаем фильтрацию, которая возвращает массив только в определенном диапазоне, например числа от 21 до 30\n            .map((page) => {\n                return <span className={currentPage === page ? s.btn__active: s.btn}\n                onClick={ () => {onPageChanged(page)}}>{page + ' '}</span>\n                })}\n\n            {portionCount > portionNumber // Стрелка вправо будет показываться только тогда когда количество порций больше, чем количество текущей порции\n            ? <button onClick={() => setPortionNumber(portionNumber + 1)} className={s.btn__next}>NEXT</button> // При клике на стрелку устанавливаем номер  порции больше на 1\n            : ''} \n        </div>\n    )\n}\n\nexport default Paginator\n\ntype PaginatorPropsType = {\n    totalItemsCount: number\n    itemsOnPage: number\n    currentPage: number\n    onPageChanged: Function\n}","import React, { useEffect, useState, ChangeEvent } from 'react'\nimport { useTable, Column } from 'react-table'\nimport './table.css'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { AppRootStateType } from '../../redux/store'\nimport { getPacksTC, addNewPackTC, deletePackTC, UpdatePackTC, GetPacksRequestType } from '../../redux/packs-reducer/packs-reducer'\nimport { PacksType } from '../../api/api'\nimport AlertPopup from '../../components/AlertPopup/AlertPopup'\nimport { Redirect } from 'react-router-dom'\nimport { SortRoute } from '../../helpers/enum'\nimport Paginator from '../../components/Paginator/Paginator'\n\n\nconst Packs = () => {\n\n    const dispatch = useDispatch()\n\n    const [searchName, setSearchName] = useState<string>('')\n    const [currentPage, setCurrentPage] = useState(1)\n\n    const responseData = useSelector<AppRootStateType, PacksType[]>((state) => state.packs.packs)\n    const serverErrorMessage = useSelector<AppRootStateType, string>((state) => state.packs.error)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n    const requestParams = useSelector<AppRootStateType, GetPacksRequestType>((state) => state.packs.requestParams) \n    const packsTotalCount = useSelector<AppRootStateType, number>((state) => state.packs.packsTotalCount)\n    const itemsOnPage = useSelector<AppRootStateType, number>((state) => state.packs.requestParams.pageCount!)\n    \n\n    const columnsNames: Column<PacksType>[] = [  \n        {\n            Header: 'Name',\n            accessor: 'name',\n        },\n        {\n            Header: 'Cards count', \n            accessor: 'cardsCount'\n        },\n        {\n            Header: 'Updated', \n            accessor: 'updated'\n        },\n        {\n            Header: 'Action', \n            //@ts-ignore\n            Cell: ({row: {original}}) => (\n                <div>\n                    <button style={{width: '20px', height: '20px', marginRight: '5px'}} onClick={() => onPackDelete(original._id)}>-</button>\n                    <button style={{height: '20px'}} onClick={() => onUpdatePack(original._id, 'my update pack')}>Update</button>\n                </div>     \n            )\n        },\n        {Header: 'Cards'}\n    ]\n\n    useEffect(() => {\n        dispatch(getPacksTC(requestParams))\n    }, [])  \n    \n    \n    const columns = React.useMemo(() => columnsNames, [])\n    const data = React.useMemo(() => responseData, [responseData])\n\n    const {\n        getTableProps,\n        getTableBodyProps, \n        headerGroups, \n        rows, \n        prepareRow \n        } = useTable(\n            {\n            columns,\n            data,\n        }\n      )\n\n\n    const onAddNewPack = () => {\n        dispatch(addNewPackTC('New title', {sortPacks: SortRoute.updateUp, packName: ''}))\n    }\n\n    const onPackDelete = (id: string) => {\n        dispatch(deletePackTC(id))\n    }\n\n    const onUpdatePack = (id: string, newTitle: string) => {\n        dispatch(UpdatePackTC(id, newTitle))\n    }\n\n    // const searchByNameHandler = (e: ChangeEvent<HTMLInputElement>) => {  // Как реализовать live поиск ?\n    //     setSearchName(e.currentTarget.value)\n    //     dispatch(getPacksTC({packName: searchName}))\n    // }\n\n    const searchByNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setSearchName(e.currentTarget.value)\n    }\n    const onSearchClick = () => {\n        dispatch(getPacksTC({packName: searchName}))\n        setSearchName('')\n    }\n\n    const onSortClick = (sortRoute: string) => { \n        dispatch(getPacksTC({sortPacks: sortRoute}))\n    }\n\n    const onPageChanged = (pageNumber: number) => {\n        setCurrentPage(pageNumber)\n        dispatch(getPacksTC({page: pageNumber}))\n    }\n\n    if(!isLoggedIn){\n        return <Redirect to='/login'/>\n    }\n\n    return (\n        <div style={{marginTop: '30px'}}>  \n            <div>Search pack by name</div>\n            <input type='text' onChange={searchByNameHandler} value={searchName} style={{border: '1px solid', width: '200px', height: '30px', paddingLeft: '15px'}}/>\n            <button onClick={onSearchClick} style={{width: '50px', height: '30px', marginRight: '50px'}}>Search</button>\n            <button onClick={onAddNewPack} style={{width: '100px', height: '40px'}}>Add pack</button>\n            <table {...getTableProps()}>\n                <thead>\n                    {headerGroups.map((headerGroup) => (            \n                        <tr{...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map((column) => (    \n                            <th {...column.getHeaderProps()}>{column.render('Header')}\n                            {column.Header === 'Name' && <span onClick={() => onSortClick(SortRoute.nameUp)}>🔼</span>}\n                            {column.Header === 'Name' &&  <span onClick={() => onSortClick(SortRoute.nameDown)}>🔽</span>}\n                            {column.Header === 'Cards count' && <span onClick={() => onSortClick(SortRoute.countUp)}>🔼</span>}\n                            {column.Header === 'Cards count' && <span onClick={() => onSortClick(SortRoute.countDown)}>🔽</span>}\n                            {column.Header === 'Updated' &&  <span onClick={() => onSortClick(SortRoute.updateUp)}>🔼</span>}\n                            {column.Header === 'Updated' &&  <span onClick={() => onSortClick(SortRoute.updateDown)}>🔽</span>}</th>\n                            ))}\n                        </tr>\n                    ))}            \n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {rows.map((row) => {\n                        prepareRow(row)\n                        return(\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map((cell) => {\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                })}\n                            </tr>\n                        )  \n                    })}\n                </tbody>\n            </table>\n            <div style={{marginLeft: '400px', marginTop: '30px'}}>\n                <Paginator \n                totalItemsCount={packsTotalCount}\n                itemsOnPage={itemsOnPage}\n                currentPage={currentPage}\n                onPageChanged={onPageChanged}\n                />\n            </div>\n            <AlertPopup message={serverErrorMessage}/>\n        </div>\n    )\n}\n\nexport default Packs\n","import React, { useEffect } from 'react'\nimport './App.css';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Login from '../features/login/Login';\nimport Registration from '../features/registration/Registration'\nimport Header from '../components/Header/Header';\nimport ForgotPasswordForm from \"../features/forgot-password/ForgotPasswordForm\";\nimport NewPassword from \"../features/new-password/NewPassword\";\nimport Profile from '../features/profile/Profile';\nimport { AppRootStateType } from '../redux/store';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { appInicializeTC } from '../redux/app-reducer/app-reducer';\nimport preloader from '../assets/img/preloader.svg'\nimport Preloader from '../components/Preloader/Preloader';\nimport Packs from '../features/packs/Packs';\n\n\nconst App = () => {\n\n  const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n  const isAppInicialized = useSelector<AppRootStateType, boolean>((state) => state.app.isAppInicialized)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(appInicializeTC())\n  }, [])\n\n\n  return (\n   <>\n   <Header />\n    {isAppInicialized \n      ? <div className='container'>     \n            <Switch>\n              <Route path='/login' render={() => <Login />}/>\n              <Route path='/registration' render={() => <Registration />}/>\n              <Route path='/profile' render={() => <Profile />}/>\n              <Route path='/forgotpassword' render={() => <div><ForgotPasswordForm/></div>}/>\n              <Route path='/newpassword' render={() => <div><NewPassword/></div>}/>\n              <Route path='/packs' render={() => <Packs />}/>      \n              <Route path='/' render={() => <Profile />}/>  \n              <Route path='*' render={() => <div>404 Not Found</div>}/>    \n            </Switch>     \n          </div>\n    : <Preloader />}\n   </>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { appReducer, AppActionsType } from './app-reducer/app-reducer';\nimport { passwordReducer, PasswordActionsType } from './password-reducer/password-reducer';\nimport { profileReducer, ProfileActionsType } from './profile-reducer/profile-reducer';\nimport { registrationReducer, RegistrationActionsType } from './registration-reducer/registration-reducer';\nimport { loginReducer, LoginActionsType } from './login-reducer/login-reducer';\nimport { combineReducers, createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from 'redux-thunk'\nimport {ForgotPassActionsType, forgotReducer} from \"./forgot-reducer/forgot-reducer\";\nimport { packsReducer } from './packs-reducer/packs-reducer';\n\nconst rootReducer = combineReducers({\n    login: loginReducer,\n    registration: registrationReducer,\n    profile: profileReducer,\n    password: passwordReducer,\n    forgot: forgotReducer,\n    app: appReducer,\n    packs: packsReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\nexport type AllAppActionsType = \n| LoginActionsType\n| ProfileActionsType\n| RegistrationActionsType\n| ForgotPassActionsType\n| PasswordActionsType\n| AppActionsType\n\n\n// @ts-ignore\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <App/>\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// basename={process.env.PUBLIC_URL}"],"sourceRoot":""}