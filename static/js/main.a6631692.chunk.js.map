{"version":3,"sources":["features/login/Login.module.css","features/registration/Registration.module.css","features/new-password/NewPassword.module.css","components/Header/Header.module.css","features/forgot-password/ForgotPassword.module.css","assets/img/enter.svg","redux/profile-reducer/profile-reducer.ts","api/loginAPI.ts","redux/login-reducer/login-reducer.ts","helpers/TextError.tsx","components/AlertPopup/AlertPopup.tsx","helpers/validators/validators.ts","features/login/Login.tsx","assets/img/note.svg","redux/registration-reducer/registration-reducer.ts","features/registration/Registration.tsx","components/Header/Header.tsx","redux/forgot-reducer/forgot-reducer.ts","assets/img/key.svg","features/forgot-password/ForgotPasswordForm.tsx","redux/password-reducer/password-reducer.ts","assets/img/rotation-lock.svg","features/new-password/NewPassword.tsx","features/profile/Profile.tsx","redux/app-reducer/app-reducer.ts","assets/img/preloader.svg","components/Preloader/Preloader.tsx","app/App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["module","exports","initialState","setUserDataAC","userData","type","instance","axios","create","baseURL","withCredentials","loginAPI","post","data","delete","email","from","message","newPassData","isLoggedIn","error","setIsLoggedInAC","setErrorMessageAC","errorMessage","stylesError","position","bottom","right","fontSize","color","TextError","props","style","children","AlertPopup","serverRequestSuccess","useEffect","toast","toUpperCase","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","validateEmail","value","test","String","toLowerCase","LoginForm","useState","setEmail","password","setPassword","rememberMe","setRememberMe","emailTouched","setEmailTouched","passwordTouched","setPasswordTouched","emailError","setEmailError","passwordError","setPasswordError","isFormValid","setIsFormValid","dispatch","useDispatch","useSelector","state","login","serverErrorMessage","to","blurHandler","e","currentTarget","name","className","s","login__form","form","form__user","src","enterImg","onSubmit","formData","preventDefault","a","response","form__username","htmlFor","id","onChange","onBlur","form__password","length","form__remember","checked","form__forgot","form__registration","form__submit","disabled","isRegisterSuccess","setIsRegisterSuccessAC","isRegister","Registration","passwordConfirm","setPasswordConfirm","passwordConfirmTouched","setPasswordConfirmTouched","passwordConfirmError","setPasswordConfirmError","history","useHistory","registration","setTimeout","push","passwordValidation","setState","setError","passwordChangeHandler","form__header","noteImg","form__email","Header","header__block","header__logo","header__links","header__btns","onClick","info","setInfoAC","setErrorAC","ForgotPasswordForm","sendMessageSuccess","forgot","forgot__form","res","forgotPassTC","NewPassword","token","useParams","changePasswordSuccess","newPass__form","resetImg","resetPasswordToken","newPasswordTC","Profile","isAppInicialized","preloaderStyles","display","justifyContent","alignItems","width","height","Preloader","preloader","App","app","isInicialized","path","render","Login","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","profile","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.a6631692.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__form\":\"Login_login__form__1eR2J\",\"form\":\"Login_form__3ARXm\",\"form__user\":\"Login_form__user__3maio\",\"form__username\":\"Login_form__username__vRFfB\",\"form__password\":\"Login_form__password__2-AQs\",\"form__remember\":\"Login_form__remember__Tcf-m\",\"form__forgot\":\"Login_form__forgot__3MwYm\",\"form__registration\":\"Login_form__registration__rebH_\",\"form__submit\":\"Login_form__submit__1zAwY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__form\":\"Registration_login__form__HaIXi\",\"form\":\"Registration_form__3PDko\",\"form__header\":\"Registration_form__header__34oh4\",\"form__email\":\"Registration_form__email__3VJM6\",\"form__password\":\"Registration_form__password__3BgCB\",\"form__submit\":\"Registration_form__submit__3KYHT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPass__form\":\"NewPassword_newPass__form__2AM1h\",\"form\":\"NewPassword_form__1xXZO\",\"form__header\":\"NewPassword_form__header__Bcsop\",\"form__password\":\"NewPassword_form__password__2V5l-\",\"form__submit\":\"NewPassword_form__submit__28XTl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header__block\":\"Header_header__block__2tjTw\",\"header__logo\":\"Header_header__logo__1ETZb\",\"header__links\":\"Header_header__links__3YLk3\",\"header__btns\":\"Header_header__btns__3jA7T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgot__form\":\"ForgotPassword_forgot__form__2beLg\",\"form\":\"ForgotPassword_form__1rcGm\",\"form__header\":\"ForgotPassword_form__header__2VQHG\",\"form__email\":\"ForgotPassword_form__email__3OKqH\",\"form__submit\":\"ForgotPassword_form__submit__kmCxW\"};","export default __webpack_public_path__ + \"static/media/enter.423cec00.svg\";","import { AuthResponseType } from './../../api/loginAPI';\n\nconst initialState: AuthResponseType | {} = {}\n\nexport const profileReducer = (state = initialState, action: ProfileActionsType) => {\n    switch(action.type){\n\n        case 'SET_USER_PROFILE': \n            return {\n                ...state, \n                ...action.userData\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const setUserDataAC = (userData: AuthResponseType) => ({type: 'SET_USER_PROFILE', userData} as const)\n\n\n// types \nexport type SetUserDataActionType = ReturnType<typeof setUserDataAC>\n\nexport type ProfileActionsType = \n| SetUserDataActionType","import axios from 'axios'\n\nconst settings = {\n    // baseURL: \"http://localhost:7542/2.0/\",\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\n    withCredentials: true\n}\n\nconst instance = axios.create(settings)\n\nexport const loginAPI = {\n    authMe: () => {\n        return instance.post<AuthResponseType>('auth/me')\n    },\n    registration: (data: { email: string, password: string }) => {\n        return instance.post<RegistrationResponseType>('auth/register', data)\n    },\n    logout: () => {\n        return instance.delete<MultiResponseType>('auth/me')\n    },\n    fetchLoginData: (data: { email: string, password: string, rememberMe: boolean }) => {\n        return instance.post<AuthResponseType>('auth/login', data)\n    },\n    forgotPass: (email: string) => {\n        return instance.post<MultiResponseType>('auth/forgot', {\n            email,\n            from: \"test-front-admin <ai73a@yandex.by>\",\n            message: `<div style=\"background-color: lime; padding: 15px\">\n                 password recovery link:\n                <a href='http://localhost:3000/#/set-new-password/$token$'>\n                 Reset Password</a></div>`\n        })\n    },\n    setNewPassword: (newPassData: NewPassDataType) => {\n        return instance.post<MultiResponseType>('auth/set-new-password', newPassData)\n    }\n}\n\n// export const profileAPI = {\n//     updateProfile: (data: {name: string, avatar: string}) => {\n//         return instance.put('auth/me', data)\n//     },\n// }\n\n// types\n\nexport type RegistrationResponseType = {\n    addedUser: Object\n    error?: string\n}\n\nexport type AuthResponseType = {\n    _id: string;\n    email: string;\n    name: string;\n    avatar?: string;\n    publicCardPacksCount: number; // количество колод\n    created: Date;\n    updated: Date;\n    isAdmin: boolean;\n    verified: boolean; // подтвердил ли почту\t\n    rememberMe: boolean;\n    error?: string;\n}\n\nexport type MultiResponseType = {\n    info: string,\n    error?: string\n}\n\nexport type UpdateProfileResponseType = {\n    updatedUser: Object,    // Поправить, посмотреть что прилетает с бэка\n    error?: string\n}\n\nexport type NewPassDataType = {\n    password: string\n    resetPasswordToken: string | undefined\n}\n\n","import { setUserDataAC, SetUserDataActionType } from './../profile-reducer/profile-reducer';\nimport { AppRootStateType } from './../store';\nimport { loginAPI } from './../../api/loginAPI';\nimport { ThunkDispatch, ThunkAction } from 'redux-thunk';\n\nconst initialState: InitialStateType = {\n    isLoggedIn: false,\n    error: ''\n}\n\nexport const loginReducer = (state: InitialStateType = initialState, action: LoginActionsType) => {\n    switch(action.type){\n\n        case 'SET_IS_LOGGED_IN':\n            return {\n                ...state,\n                isLoggedIn: action.isLoggedIn\n            }\n\n        case 'SET_ERROR_MESSAGE':\n            return {\n                ...state,\n                error: action.errorMessage\n            }\n\n        default:\n            return state\n    }\n}\n\n\n// actions\nexport const setIsLoggedInAC = (isLoggedIn: boolean) => ({type: 'SET_IS_LOGGED_IN', isLoggedIn} as const)\nexport const setErrorMessageAC = (errorMessage: string) => ({type: 'SET_ERROR_MESSAGE', errorMessage} as const)\n\n\n// thunks\nexport const loginTC = (formData: {email: string, password: string, rememberMe: boolean}): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            const {data} = await loginAPI.fetchLoginData(formData)\n            dispatch(setUserDataAC(data))\n            dispatch(setIsLoggedInAC(true))\n        }\n        catch(e){\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\nexport const logoutTC = (): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            await loginAPI.logout()\n            dispatch(setIsLoggedInAC(false))\n        }\n        catch(e){\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\n\n// types\ntype InitialStateType = {\n    isLoggedIn: boolean,\n    error: string\n}\n\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\n\nexport type LoginActionsType = \n| SetIsLoggedInActionType\n| ReturnType<typeof setErrorMessageAC>\n| SetUserDataActionType\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, LoginActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, LoginActionsType>\n","import React from 'react'\n\ninterface ITextErrorPropsType {\n    children?: React.ReactNode\n}\n\nconst stylesError = {\n    position: 'absolute' as const,\n    bottom: '-19px',\n    right: '0',\n    fontSize: '14px',\n    color: 'red'\n}\n\nexport const TextError: React.FC<ITextErrorPropsType> = (props) => {\n    return (\n        <div style={stylesError}>\n            {props.children}\n        </div>\n    )\n}","import React, { useEffect } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst AlertPopup: React.FC<ErrorPopupPropsType> = ({message, serverRequestSuccess}) => {\n\n    const viewMessage = () => {\n        if(message === 'user not found /ᐠ-ꞈ-ᐟ\\\\') return 'user not found'\n        if(message === 'not correct password /ᐠ-ꞈ-ᐟ\\\\') return 'not correct password'\n        if(message === 'not valid email/password /ᐠ-ꞈ-ᐟ\\\\') return 'not valid email/password'\n        if(message === 'email already exists /ᐠ｡ꞈ｡ᐟ\\\\') return 'that username is taken'\n        if(message === 'Email address not found /ᐠ-ꞈ-ᐟ\\\\') return 'Email adress not found'\n        if(message === 'no resetPasswordToken, Check your request! /ᐠ-ꞈ-ᐟ\\\\') return 'Please check your email and click on recovery link'\n        return 'server error'\n    }\n\n    // Без useEffect попап всплывает 2 раза\n    useEffect(() => {\n        if(message){\n            toast(viewMessage().toUpperCase())\n        }\n        if(serverRequestSuccess){\n            toast('success ✔️'.toUpperCase())\n        }\n    }, [message, serverRequestSuccess])\n  \n    return (\n        <div>\n            <ToastContainer  \n            position=\"bottom-right\"\n            autoClose={4000}\n            hideProgressBar\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover/>\n        </div>\n    )\n}\n\nexport default AlertPopup\n\n// types\ntype ErrorPopupPropsType = {\n    message?: string\n    serverRequestSuccess?: boolean | string\n}","export const validateEmail = (value: string) => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return !re.test(String(value).toLowerCase())\n}","import React, { useState, FocusEvent, useEffect } from 'react'\nimport enterImg from '../../assets/img/enter.svg'\nimport s from './Login.module.css'\nimport { NavLink, Redirect, useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loginTC } from '../../redux/login-reducer/login-reducer'\nimport { AppRootStateType } from '../../redux/store'\nimport { TextError } from '../../helpers/TextError'\nimport AlertPopup from '../../components/AlertPopup/AlertPopup'\nimport { validateEmail } from '../../helpers/validators/validators'\n\n\nconst LoginForm: React.FC = () => {\n\n    const [email, setEmail] = useState<string>('')\n    const [password, setPassword] = useState<string>('')\n    const [rememberMe, setRememberMe] = useState<boolean>(false)\n    const [emailTouched, setEmailTouched] = useState<boolean>(false)\n    const [passwordTouched, setPasswordTouched] = useState<boolean>(false)\n    const [emailError, setEmailError] = useState<string>('Email field is required')\n    const [passwordError, setPasswordError] = useState<string>('Password is required')\n    const [isFormValid, setIsFormValid] = useState<boolean>(false)\n\n    const dispatch = useDispatch()\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n    const serverErrorMessage = useSelector<AppRootStateType, string>((state) => state.login.error)\n\n    useEffect(() => {\n        if(emailError || passwordError){\n            setIsFormValid(false)\n        } else{\n            setIsFormValid(true)\n        }\n    }, [emailError, passwordError])\n\n    if(isLoggedIn){\n        return <Redirect to='/profile'/>\n    }\n\n    const emailChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(e.currentTarget.value)\n\n        const isValidEmail = validateEmail(e.currentTarget.value)\n        if (isValidEmail) {\n            setEmailError('Incorrect email format')\n            if(!e.currentTarget.value){\n                setEmailError('Email field is required')\n            }\n        } else {\n            setEmailError('') \n        }\n    }\n    const passwordChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setPassword(e.currentTarget.value)\n        if(e.currentTarget.value.length < 7){\n            setPasswordError('Min length 7 symbols')\n            if(!e.currentTarget.value){\n                setPasswordError('Password is required')\n            }\n        } else{\n            setPasswordError('')\n        }\n    }\n    const remeberMeChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setRememberMe(e.currentTarget.checked)\n    }\n\n\n    const blurHandler = (e: FocusEvent<HTMLInputElement>) => {\n        if(e.currentTarget.name === 'email'){\n            setEmailTouched(true)\n        }\n        if(e.currentTarget.name === 'password'){\n            setPasswordTouched(true)\n        }\n    }\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault()\n        dispatch(loginTC({email, password, rememberMe}))\n    }\n\n    return (\n        <>\n            <div className={s.login__form}>\n                <div className={s.form}>\n                    <div className={s.form__user}>\n                        <div>SIGN IN</div>\n                        <img src={enterImg} />\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className={s.form__username}>\n                            <div><label htmlFor='email'>username</label></div>\n                            <input \n                            type='text' \n                            id='email' \n                            name='email' \n                            value={email}\n                            onChange={emailChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(emailError && emailTouched) && <TextError>{emailError}</TextError>}\n                        </div>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='password'>password</label></div>\n                            <input \n                            type='password' \n                            id='password' \n                            name='password' \n                            value={password}\n                            onChange={passwordChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(passwordError && passwordTouched) && <TextError>{passwordError}</TextError>}\n                        </div>\n                        <div className={s.form__remember}>\n                            <div><label htmlFor='rememberMe'>remember me</label></div>\n                            <input \n                            type='checkbox' \n                            id='rememberMe' \n                            name='rememberMe' \n                            checked={rememberMe}\n                            onChange={remeberMeChangeHandler}/>\n                        </div>\n                        <div className={s.form__forgot}><NavLink to='/forgotpassword'>Forgot password ?</NavLink></div>\n                        <div className={s.form__registration}><NavLink to='/registration'>Registration here</NavLink></div>\n                        <div className={s.form__submit}>\n                            <button type='submit' disabled={!isFormValid}>Login</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <AlertPopup message={serverErrorMessage} serverRequestSuccess={isLoggedIn}/>\n        </>\n    )\n}\n\n\n\nexport default LoginForm\n","export default __webpack_public_path__ + \"static/media/note.129a606a.svg\";","import { loginAPI } from './../../api/loginAPI';\nimport { AppRootStateType } from './../store';\nimport { ThunkDispatch, ThunkAction } from \"redux-thunk\"\n\nconst initialState: InitialStateType = {\n    isRegisterSuccess: false,\n    error: ''\n}\n\nexport const registrationReducer = (state: InitialStateType = initialState, action: RegistrationActionsType) => {\n    switch(action.type){\n        case 'SET_IS_REGISTER_SUCCESS':\n            return {\n                ...state,\n                isRegisterSuccess: action.isRegister\n            }\n\n        case 'SET_ERROR_MESSAGE':\n            return {\n                ...state,\n                error: action.errorMessage\n            }\n\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setIsRegisterSuccessAC = (isRegister: boolean) => ({type: 'SET_IS_REGISTER_SUCCESS', isRegister} as const)\nexport const setErrorMessageAC = (errorMessage: string) => ({type: 'SET_ERROR_MESSAGE', errorMessage} as const)\n\n// thunks\nexport const registrationTC = (data: {email: string, password: string}): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            await loginAPI.registration(data)\n            dispatch(setIsRegisterSuccessAC(true))\n        } catch(e){\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\n\n// types\ntype InitialStateType = {\n    isRegisterSuccess: boolean,\n    error: string\n}\n\nexport type RegistrationActionsType = \n| ReturnType<typeof setIsRegisterSuccessAC>\n| ReturnType<typeof setErrorMessageAC>\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, RegistrationActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, RegistrationActionsType>\n","import React, { useState, FocusEvent, useEffect } from 'react'\nimport noteImg from '../../assets/img/note.svg'\nimport s from './Registration.module.css'\nimport { Redirect, useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppRootStateType } from '../../redux/store'\nimport { TextError } from '../../helpers/TextError'\nimport AlertPopup from '../../components/AlertPopup/AlertPopup'\nimport { registrationTC, setIsRegisterSuccessAC } from '../../redux/registration-reducer/registration-reducer'\nimport { validateEmail } from '../../helpers/validators/validators'\n\n\nconst Registration: React.FC = () => {\n\n    const [email, setEmail] = useState<string>('')\n    const [password, setPassword] = useState<string>('')\n    const [passwordConfirm, setPasswordConfirm] = useState<string>('')\n    const [emailTouched, setEmailTouched] = useState<boolean>(false)\n    const [passwordTouched, setPasswordTouched] = useState<boolean>(false)\n    const [passwordConfirmTouched, setPasswordConfirmTouched] = useState<boolean>(false)\n    const [emailError, setEmailError] = useState<string>('Email field is required')\n    const [passwordError, setPasswordError] = useState<string>('Password is required')\n    const [passwordConfirmError, setPasswordConfirmError] = useState<string>('Password is required')\n    const [isFormValid, setIsFormValid] = useState<boolean>(false)\n\n    useEffect(() => {\n        if(emailError || passwordError || passwordConfirmError){\n            setIsFormValid(false)\n        } else {\n            setIsFormValid(true)\n        }\n    }, [emailError, passwordError, passwordConfirmError])\n\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const isRegisterSuccess = useSelector<AppRootStateType, boolean>((state) => state.registration.isRegisterSuccess)\n    const serverErrorMessage = useSelector<AppRootStateType, string>((state) => state.registration.error)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n\n    useEffect(() => {\n        if(isRegisterSuccess) {\n            setTimeout(() => {\n                history.push('/login')\n                dispatch(setIsRegisterSuccessAC(false))\n            }, 3000)\n        }    \n    }, [isRegisterSuccess])\n\n\n    if(isLoggedIn){\n        return <Redirect to='/profile'/>\n    }\n\n\n    const emailChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(e.currentTarget.value)\n\n        const isValidEmail = validateEmail(e.currentTarget.value)\n        if (isValidEmail) {\n            setEmailError('Incorrect email format')\n            if(!e.currentTarget.value){\n                setEmailError('Email field is required')\n            }\n        } else {\n            setEmailError('')  \n        }\n    }\n\n    const passwordValidation = (password: string, setState: Function, setError: Function) => {\n        setState(password)\n        if(password.length < 7){\n            setError('Min length 7 symbols')\n            if(!password){\n                setError('Password is required')\n            }\n        } else{\n            setError('')\n        }\n    }\n\n    const passwordChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if(e.currentTarget.name === 'password'){\n            passwordValidation(e.currentTarget.value, setPassword, setPasswordError)\n        }\n        if(e.currentTarget.name === 'passwordConfirm'){\n            passwordValidation(e.currentTarget.value, setPasswordConfirm, setPasswordConfirmError)\n        }\n    }\n \n\n    const blurHandler = (e: FocusEvent<HTMLInputElement>) => {\n        if(e.currentTarget.name === 'email'){\n            setEmailTouched(true)\n        }\n        if(e.currentTarget.name === 'password'){\n            setPasswordTouched(true)\n        }\n        if(e.currentTarget.name === 'passwordConfirm'){\n            setPasswordConfirmTouched(true)\n        }\n    }\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault()\n        if(password !== passwordConfirm){\n            setPasswordConfirmError('Different passwords')\n        } else {\n            dispatch(registrationTC({email, password}))\n        }\n    }\n\n    return (\n        <>\n            <div className={s.login__form}>\n                <div className={s.form}>\n                    <div className={s.form__header}>\n                        <div>REGISTRATION</div>\n                        <img src={noteImg}/>\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className={s.form__email}>\n                            <div><label htmlFor='email'>email</label></div>\n                            <input \n                            type='text' \n                            id='email' \n                            name='email' \n                            value={email}\n                            onChange={emailChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(emailError && emailTouched) && <TextError>{emailError}</TextError>}\n                        </div>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='password'>password</label></div>\n                            <input \n                            type='password' \n                            id='password' \n                            name='password' \n                            value={password}\n                            onChange={passwordChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(passwordError && passwordTouched) && <TextError>{passwordError}</TextError>}\n                        </div>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='passwordConfirm'>confirm password</label></div>\n                            <input \n                            type='password' \n                            id='passwordConfirm' \n                            name='passwordConfirm' \n                            value={passwordConfirm}\n                            onChange={passwordChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(passwordConfirmError && passwordConfirmTouched) && <TextError>{passwordConfirmError}</TextError>}\n                        </div>\n                        <div className={s.form__submit}>\n                            <button type='submit' disabled={!isFormValid}>Sign up</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <AlertPopup message={serverErrorMessage} serverRequestSuccess={isRegisterSuccess}/>\n        </>\n    )\n}\n\n\n\nexport default Registration\n\n","import React from 'react'\nimport s from './Header.module.css'\nimport { NavLink, Redirect } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { logoutTC } from '../../redux/login-reducer/login-reducer'\nimport { AppRootStateType } from '../../redux/store'\n\nconst Header = () => {\n\n    const isLoggedIn = useSelector<AppRootStateType>((state) => state.login.isLoggedIn)\n    const dispatch = useDispatch()\n\n    const logout = () => {\n        dispatch(logoutTC())\n    }\n\n    const login = () => {\n        return <Redirect to='/login'/>\n    }\n\n    return (\n        <div>\n            <div className={s.header__block}>\n                <div className={s.header__logo}>LOGO</div>\n                <div className={s.header__links}>\n                    <NavLink to='/login'>Login</NavLink>\n                    <NavLink to='/registration'>Registration</NavLink>\n                    <NavLink to='/profile'>Profile</NavLink>\n                    <NavLink to='/newpassword'>New Password</NavLink>\n                    <NavLink to='/forgotpassword'>Forgot Password</NavLink>\n                    <NavLink to='/test'>Test</NavLink>\n                </div>\n                {isLoggedIn\n                  ? <div className={s.header__btns}><button onClick={logout}>Log out</button></div>\n                  : <div className={s.header__btns}><button onClick={login}>Login</button></div>}\n                \n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppRootStateType} from \"../store\";\nimport {loginAPI} from \"../../api/loginAPI\";\n\nconst initialState: InitialForgotStateType = {\n    info: '',\n    error: ''\n}\n\nexport const forgotReducer = (state = initialState, action: ForgotPassActionsType): InitialForgotStateType => {\n    switch (action.type) {\n\n        case 'forgot/SET_INFO': \n            return {\n                ...state,\n                info: action.info\n            }\n\n        case 'forgot/SET_ERROR': \n            return {\n                ...state,\n                error: action.error\n            }\n\n        default:\n            return state\n    }\n}\n\n\n//actions\nexport const setInfoAC = (info: string) => ({type: 'forgot/SET_INFO',  info} as const)\nexport const setErrorAC = (error: string) => ({type: 'forgot/SET_ERROR', error} as const)\n\n//thunks\nexport const forgotPassTC = (email: string): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            const res = await loginAPI.forgotPass(email)\n            dispatch(setInfoAC(res.data.info))\n        } catch(e){\n            dispatch(setErrorAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorAC(''))\n        }\n    }\n}\n\n\n//types\nexport type InitialForgotStateType = {\n    info: string\n    error: string\n}\nexport type ForgotPassActionsType = \n| ReturnType<typeof setInfoAC>\n| ReturnType<typeof setErrorAC>\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, ForgotPassActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ForgotPassActionsType>\n","export default __webpack_public_path__ + \"static/media/key.4ca8f8c2.svg\";","import React, {FocusEvent, useEffect, useState} from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Redirect, useHistory} from 'react-router-dom';\nimport {forgotPassTC, setInfoAC} from '../../redux/forgot-reducer/forgot-reducer';\nimport {AppRootStateType} from \"../../redux/store\";\nimport s from \"../forgot-password/ForgotPassword.module.css\";\nimport {TextError} from \"../../helpers/TextError\";\nimport forgot from \"../../assets/img/key.svg\";\nimport AlertPopup from '../../components/AlertPopup/AlertPopup';\nimport { validateEmail } from '../../helpers/validators/validators';\n\n\nconst ForgotPasswordForm = () => {\n\n    const [email, setEmail] = useState<string>('')\n    const [emailTouched, setEmailTouched] = useState<boolean>(false)\n    const [emailError, setEmailError] = useState<string>('Email field is required')\n    const [isFormValid, setIsFormValid] = useState<boolean>(false)\n\n    const sendMessageSuccess = useSelector<AppRootStateType, string>((state) => state.forgot.info)\n    const serverErrorMessage = useSelector<AppRootStateType, string>((state) => state.forgot.error)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        if (emailError) {\n            setIsFormValid(false)\n        } else{\n            setIsFormValid(true)\n        }\n    }, [emailError])\n\n    useEffect(() => {\n        if(sendMessageSuccess){\n            setTimeout(() => {\n                history.push('/login')\n                dispatch(setInfoAC(''))\n            }, 3000)\n        }    \n    }, [sendMessageSuccess])\n\n    \n    if(isLoggedIn){\n        return <Redirect to='/profile'/>\n    }\n\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault()\n        dispatch(forgotPassTC(email))\n    }\n\n    const emailChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(e.currentTarget.value)\n        \n        const isValidEmail = validateEmail(e.currentTarget.value)\n        if (isValidEmail) {\n            setEmailError('Incorrect email format')\n            if (!e.currentTarget.value) {\n                setEmailError('Email field is required')\n            }\n        } else {\n            setEmailError('')\n        }\n    }\n\n    const blurHandler = (e: FocusEvent<HTMLInputElement>) => {\n        if (e.currentTarget.name === 'email') {\n            setEmailTouched(true)\n        }\n    }\n    \n\n    return (\n        <>\n            <div className={s.forgot__form}>\n                <div className={s.form}>\n                    <div className={s.form__header}>\n                        <div>Forgot Password</div>\n                        <img src={forgot}/>\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className={s.form__email}>\n                            <div><label htmlFor='email'>Enter valid email</label></div>\n                            <input\n                                type='text'\n                                id='email'\n                                name='email'\n                                value={email}\n                                onChange={emailChangeHandler}\n                                onBlur={blurHandler}/>\n                            {(emailError && emailTouched) && <TextError>{emailError}</TextError>}\n                        </div>\n                        <div className={s.form__submit}>\n                            <button type='submit' disabled={!isFormValid}>Send</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <AlertPopup message={serverErrorMessage} serverRequestSuccess={sendMessageSuccess}/>\n            {/* Email address not found /ᐠ-ꞈ-ᐟ\\\\ */}\n            {/* sent —ฅ/ᐠ.̫ .ᐟ\\\\ฅ— */}\n        </>\n\n    )\n}\n\n\nexport default ForgotPasswordForm\n\n","import {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppRootStateType} from \"../store\";\nimport {loginAPI} from \"../../api/loginAPI\";\n\n\nconst initialState: InitialSetNewPassType = {\n    info: '',\n    error: ''\n}\n\n\nexport const passwordReducer = (state = initialState, action: PasswordActionsType): InitialSetNewPassType => {\n    switch (action.type) {\n\n        case 'password/SET_INFO': \n            return {\n                ...state,\n                info: action.info\n            }\n\n        case 'password/SET_ERROR': \n            return {\n                ...state,\n                error: action.error\n            }\n\n        default:\n            return state\n    }\n}\n\n\n//actions\nconst setInfoAC = (info: string) => ({type: 'password/SET_INFO', info} as const)\nconst setErrorAC = (error: string) => ({type: 'password/SET_ERROR', error} as const)\n\n//thunks\nexport const newPasswordTC = (password: string, resetPasswordToken: string | undefined): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            const res = await loginAPI.setNewPassword({password, resetPasswordToken})\n            dispatch(setInfoAC(res.data.info))\n        } catch(e){\n            dispatch(setErrorAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorAC(''))\n        }\n    }\n}\n\n\n//types\nexport type InitialSetNewPassType = {\n    info: string\n    error: string\n}\nexport type PasswordActionsType = \n| ReturnType<typeof setInfoAC>\n| ReturnType<typeof setErrorAC>\n\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, PasswordActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, PasswordActionsType>\n","export default __webpack_public_path__ + \"static/media/rotation-lock.fb2f4187.svg\";","import React, {FocusEvent, useEffect, useState} from 'react'\nimport s from './NewPassword.module.css'\nimport {useHistory, useParams, Redirect} from 'react-router-dom'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../redux/store'\nimport {TextError} from '../../helpers/TextError'\nimport AlertPopup from '../../components/AlertPopup/AlertPopup'\nimport {newPasswordTC} from \"../../redux/password-reducer/password-reducer\";\nimport resetImg from './../../../src/assets/img/rotation-lock.svg'\nimport { setInfoAC } from '../../redux/forgot-reducer/forgot-reducer'\n\nconst NewPassword: React.FC = () => {\n\n    const [password, setPassword] = useState<string>('')\n    const [passwordConfirm, setPasswordConfirm] = useState<string>('')\n    const [passwordTouched, setPasswordTouched] = useState<boolean>(false)\n    const [passwordConfirmTouched, setPasswordConfirmTouched] = useState<boolean>(false)\n    const [passwordError, setPasswordError] = useState<string>('Password is required')\n    const [passwordConfirmError, setPasswordConfirmError] = useState<string>('Password is required')\n    const [isFormValid, setIsFormValid] = useState<boolean>(false)\n    const {token} = useParams<{ token?: string }>()\n\n    const changePasswordSuccess = useSelector<AppRootStateType, string>((state) => state.password.info)\n    const serverErrorMessage = useSelector<AppRootStateType, string>((state) => state.password.error)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        if (passwordError || passwordConfirmError) {\n            setIsFormValid(false)\n        } else {\n            setIsFormValid(true)\n        }\n    }, [passwordError, passwordConfirmError])\n\n\n    useEffect(() => {\n        if (changePasswordSuccess) {\n            setTimeout(() => {\n                history.push('/login')\n                dispatch(setInfoAC(''))\n            }, 3000)\n        }\n    }, [changePasswordSuccess])\n\n\n    if(isLoggedIn){\n        return <Redirect to='/profile'/>\n    }\n\n\n    const passwordValidation = (password: string, setState: Function, setError: Function) => {\n        setState(password)\n        if (password.length < 7) {\n            setError('Min length 7 symbols')\n            if (!password) {\n                setError('Password is required')\n            }\n        } else {\n            setError('')\n        }\n    }\n\n    const passwordChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget.name === 'password') {\n            passwordValidation(e.currentTarget.value, setPassword, setPasswordError)\n        }\n        if (e.currentTarget.name === 'passwordConfirm') {\n            passwordValidation(e.currentTarget.value, setPasswordConfirm, setPasswordConfirmError)\n        }\n    }\n\n\n    const blurHandler = (e: FocusEvent<HTMLInputElement>) => {\n\n        if (e.currentTarget.name === 'password') {\n            setPasswordTouched(true)\n        }\n        if (e.currentTarget.name === 'passwordConfirm') {\n            setPasswordConfirmTouched(true)\n        }\n    }\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault()\n        if (password !== passwordConfirm) {\n            setPasswordConfirmError('Different passwords')\n        } else {\n            dispatch(newPasswordTC(password, token))\n        }\n    }\n\n\n    return (\n        <>\n            <div className={s.newPass__form}>\n                <div className={s.form}>\n                    <div className={s.form__header}>\n                        <div>Set New Password</div>\n                        <img src={resetImg}/>\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='password'>password</label></div>\n                            <input\n                                type='password'\n                                id='password'\n                                name='password'\n                                value={password}\n                                onChange={passwordChangeHandler}\n                                onBlur={blurHandler}/>\n                            {(passwordError && passwordTouched) && <TextError>{passwordError}</TextError>}\n                        </div>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='passwordConfirm'>confirm password</label></div>\n                            <input\n                                type='password'\n                                id='passwordConfirm'\n                                name='passwordConfirm'\n                                value={passwordConfirm}\n                                onChange={passwordChangeHandler}\n                                onBlur={blurHandler}/>\n                            {(passwordConfirmError && passwordConfirmTouched) &&\n                            <TextError>{passwordConfirmError}</TextError>}\n                        </div>\n                        <div className={s.form__submit}>\n                            <button type='submit' disabled={!isFormValid}>Set New Password</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <AlertPopup message={serverErrorMessage} serverRequestSuccess={changePasswordSuccess}/>   \n        </>\n    )\n}\n\n\nexport default NewPassword\n\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppRootStateType } from '../../redux/store'\nimport { Redirect } from 'react-router-dom'\n\nconst Profile = () => {\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n\n    if(!isLoggedIn){\n        return <Redirect to='/login'/>\n    }\n\n    return (\n        <div>\n            Profile Component\n        </div>\n    )\n}\n\nexport default Profile\n","import { setIsLoggedInAC, SetIsLoggedInActionType } from './../login-reducer/login-reducer';\nimport { SetUserDataActionType } from './../profile-reducer/profile-reducer';\nimport { loginAPI } from './../../api/loginAPI';\nimport { AppRootStateType } from './../store';\nimport { ThunkDispatch, ThunkAction } from \"redux-thunk\"\nimport { setUserDataAC } from '../profile-reducer/profile-reducer';\n\nconst initialState: InitialStateType = {\n    isAppInicialized: false,\n    error: ''\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType) => {\n    switch(action.type){\n        case 'app/SET_APP_INICIALIZED': \n            return {\n                ...state,\n                isAppInicialized: action.isInicialized\n            }\n        \n        case 'app/SET_ERROR_MESSAGE': {\n            return {\n                ...state,\n                error: action.errorMessage\n            }\n        }\n\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setAppInicializedAC = (isInicialized: boolean) => ({type: 'app/SET_APP_INICIALIZED', isInicialized} as const)\nexport const setErrorMessageAC = (errorMessage: string) => ({type: 'app/SET_ERROR_MESSAGE', errorMessage} as const)\n\n// thunks\nexport const appInicializeTC = (): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            const res = await loginAPI.authMe()\n            dispatch(setUserDataAC(res.data))\n            dispatch(setIsLoggedInAC(true))\n        } catch(e){\n            dispatch(setErrorMessageAC('АВТОРИЗУЙТЕСЬ!'))  // Исправить !\n        } finally{\n            dispatch(setAppInicializedAC(true))\n        }\n    }\n}\n\n// types\ntype InitialStateType = {\n    isAppInicialized: boolean\n    error: string\n}\n\nexport type AppActionsType = \n| ReturnType<typeof setAppInicializedAC>\n| ReturnType<typeof setErrorMessageAC>\n| SetUserDataActionType\n| SetIsLoggedInActionType\n\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, AppActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, AppActionsType>","export default __webpack_public_path__ + \"static/media/preloader.8d5bc12c.svg\";","import React from 'react'\nimport preloader from '../../assets/img/preloader.svg'\n\nconst preloaderStyles = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    height: '100vh'\n}\n\nconst Preloader: React.FC = () => {\n    return (\n        <div style={preloaderStyles}>\n            <div><img src={preloader} /></div>\n        </div>\n    )\n}\n\nexport default Preloader\n","import React, { useEffect } from 'react'\nimport './App.css';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Login from '../features/login/Login';\nimport Registration from '../features/registration/Registration'\nimport Header from '../components/Header/Header';\nimport ForgotPasswordForm from \"../features/forgot-password/ForgotPasswordForm\";\nimport NewPassword from \"../features/new-password/NewPassword\";\nimport Profile from '../features/profile/Profile';\nimport { AppRootStateType } from '../redux/store';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { appInicializeTC } from '../redux/app-reducer/app-reducer';\nimport preloader from '../assets/img/preloader.svg'\nimport Preloader from '../components/Preloader/Preloader';\n\n\nconst App = () => {\n\n  const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n  const isAppInicialized = useSelector<AppRootStateType, boolean>((state) => state.app.isAppInicialized)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(appInicializeTC())\n  }, [])\n\n\n  return (\n   <>\n   <Header />\n    {isAppInicialized \n      ? <div className='container'>     \n            <Switch>\n              <Route path='/login' render={() => <Login />}/>\n              <Route path='/registration' render={() => <Registration />}/>\n              <Route path='/profile' render={() => <Profile />}/>\n                <Route path='/forgotpassword' render={() => <div><ForgotPasswordForm/></div>}/>\n              <Route path='/newpassword' render={() => <div><NewPassword/></div>}/>\n              <Route path='/test' render={() => <div>View custom components will be here</div>}/>      \n              <Route path='*' render={() => <div>404 Not Found</div>}/>    \n            </Switch>     \n          </div>\n    : <Preloader />}\n   </>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { appReducer, AppActionsType } from './app-reducer/app-reducer';\nimport { passwordReducer, PasswordActionsType } from './password-reducer/password-reducer';\nimport { profileReducer, ProfileActionsType } from './profile-reducer/profile-reducer';\nimport { registrationReducer, RegistrationActionsType } from './registration-reducer/registration-reducer';\nimport { loginReducer, LoginActionsType } from './login-reducer/login-reducer';\nimport { combineReducers, createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from 'redux-thunk'\nimport {ForgotPassActionsType, forgotReducer} from \"./forgot-reducer/forgot-reducer\";\n\nconst rootReducer = combineReducers({\n    login: loginReducer,\n    registration: registrationReducer,\n    profile: profileReducer,\n    password: passwordReducer,\n    forgot: forgotReducer,\n    app: appReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\nexport type AllAppActionsType = \n| LoginActionsType\n| ProfileActionsType\n| RegistrationActionsType\n| ForgotPassActionsType\n| PasswordActionsType\n| AppActionsType\n\n\n// @ts-ignore\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <App/>\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// basename={process.env.PUBLIC_URL}"],"sourceRoot":""}