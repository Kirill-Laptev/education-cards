{"version":3,"sources":["features/cards/Cards.module.css","features/packs/Packs.module.css","features/login/Login.module.css","features/registration/Registration.module.css","features/new-password/NewPassword.module.css","components/Header/Header.module.css","features/forgot-password/ForgotPassword.module.css","components/Paginator/Paginator.module.css","components/Select/Select.module.css","components/ModalPopup/ModalPopup.module.css","helpers/enum.ts","assets/img/enter.svg","redux/profile-reducer/profile-reducer.ts","api/api.ts","redux/login-reducer/login-reducer.ts","helpers/TextError.tsx","components/AlertPopup/AlertPopup.tsx","helpers/validators/validators.ts","features/login/Login.tsx","assets/img/note.svg","redux/registration-reducer/registration-reducer.ts","features/registration/Registration.tsx","components/Header/Header.tsx","redux/forgot-reducer/forgot-reducer.ts","assets/img/key.svg","features/forgot-password/ForgotPasswordForm.tsx","redux/password-reducer/password-reducer.ts","assets/img/rotation-lock.svg","features/new-password/NewPassword.tsx","features/profile/Profile.tsx","redux/app-reducer/app-reducer.ts","assets/img/preloader.svg","components/Preloader/Preloader.tsx","redux/packs-reducer/packs-reducer.ts","components/Paginator/Paginator.tsx","components/Select/Select.tsx","components/ModalPopup/ModalPopup.tsx","features/packs/modals/AddPackModal.tsx","features/packs/modals/ModalDeletePack.tsx","features/packs/modals/ModalEditPack.tsx","features/packs/Packs.tsx","assets/img/idea.gif","redux/cards-reducer/cards-reducer.ts","features/cards/modals/CardInfoModal.tsx","features/cards/modals/CardEditModal.tsx","features/cards/modals/AddCardModal.tsx","features/cards/Cards.tsx","app/App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["module","exports","SortDirection","initialState","setUserDataAC","userData","type","instance","axios","create","baseURL","withCredentials","loginAPI","post","data","delete","email","from","message","newPassData","packsAPI","paramsRequest","get","params","title","cardsPack","name","id","_id","put","cardsAPI","requestParams","card","isLoggedIn","error","setIsLoggedInAC","setErrorMessageAC","errorMessage","stylesError","position","bottom","right","fontSize","color","TextError","props","style","children","AlertPopup","serverRequestSuccess","useEffect","toast","toUpperCase","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","validateEmail","value","test","String","toLowerCase","LoginForm","useState","setEmail","password","setPassword","rememberMe","setRememberMe","emailTouched","setEmailTouched","passwordTouched","setPasswordTouched","emailError","setEmailError","passwordError","setPasswordError","isFormValid","setIsFormValid","dispatch","useDispatch","useSelector","state","login","serverErrorMessage","to","blurHandler","e","currentTarget","className","s","login__form","form","form__user","src","enterImg","onSubmit","formData","preventDefault","a","response","form__username","htmlFor","onChange","onBlur","form__password","length","form__remember","checked","form__forgot","form__registration","form__submit","disabled","isRegisterSuccess","setIsRegisterSuccessAC","isRegister","Registration","passwordConfirm","setPasswordConfirm","passwordConfirmTouched","setPasswordConfirmTouched","passwordConfirmError","setPasswordConfirmError","history","useHistory","registration","setTimeout","push","passwordValidation","setState","setError","passwordChangeHandler","form__header","noteImg","form__email","Header","header__block","header__logo","header__links","header__btns","onClick","info","setInfoAC","setErrorAC","ForgotPasswordForm","sendMessageSuccess","forgot","forgot__form","res","forgotPassTC","NewPassword","token","useParams","changePasswordSuccess","newPass__form","resetImg","resetPasswordToken","newPasswordTC","Profile","isAppInicialized","preloaderStyles","display","justifyContent","alignItems","width","height","Preloader","preloader","packs","packsTotalCount","packName","min","max","sortPacks","page","pageCount","userId","isPackActionSuccess","updateRequestParamsAC","newParams","setPackActionStatusAC","isSuccess","getPacksTC","getState","cardPacks","cardPacksTotalCount","Paginator","totalItemsCount","itemsOnPage","currentPage","onPageChange","portionNumber","setPortionNumber","pagesCount","Math","ceil","pages","i","portionCount","leftPortionPageNumber","rightPortionPageNumber","paginator","size","icon__prev","filter","map","btn__active","btn","icon__next","Select","onSelectValue","selectValues","select__outer","select__start","select","select__end","ModalPopup","show","setShow","modal__wrapper","open","close","modal__inner","stopPropagation","AddPackModal","setPackName","isAddPackSuccess","updateUp","ModalDeletePack","packId","isDeleteSuccess","ModalEditPack","newPackName","setNewPackName","isEditSuccess","newTitle","Packs","searchName","setSearchName","setCurrentPage","modalAddShow","setModalAddShow","modalDeleteShow","setModalDeleteShow","modalData","setModalData","modalEditShow","setModalEditShow","columns","useMemo","icons","sort","nameUp","nameDown","countUp","countDown","updateDown","packsRows","window","scrollTo","onSortClick","header","search__title","search__field","placeholder","search__btn","add","table","column","table__title","title__icons","row","cardsCount","updated","action__btns","action__btn","table__footer","pageNumber","footer__select","cards","cardsTotalCount","cardQuestion","cardsPack_id","isCardActionSuccess","cardActionStatusAC","getCardsTC","CardInfoModal","question","answer","CardEditModal","cardPackId","cardId","successDelete","successUpdate","setCardQuestion","cardAnswer","setCardAnswer","deleteCardTC","CardAddModal","setQuestion","setAnswer","isAddCardSuccess","Cards","foundQuestion","setFoundQuestion","modalInfoShow","setModalInfoShow","sliceAnswer","string","slice","card__outer","card__inner","card__img","ideaGif","card__title","card__subtitle","card__rate","card__stars","grade","toFixed","card__buttons","card__info_btn","card__edit_btn","cards__footer","AddCardModal","App","app","isInicialized","path","render","Login","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","profile","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.3cba9539.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Cards_header__2gQL4\",\"search__title\":\"Cards_search__title__3OYfP\",\"search__field\":\"Cards_search__field__FaNuP\",\"search__btn\":\"Cards_search__btn__xIsMg\",\"add\":\"Cards_add__3I_Ha\",\"cards\":\"Cards_cards__3prkD\",\"card__outer\":\"Cards_card__outer__3Xl7w\",\"card__inner\":\"Cards_card__inner__3Y0LA\",\"card__img\":\"Cards_card__img__2-c5g\",\"card__title\":\"Cards_card__title__1nYP9\",\"card__subtitle\":\"Cards_card__subtitle__2lrOQ\",\"card__rate\":\"Cards_card__rate__2x4Mn\",\"card__stars\":\"Cards_card__stars__XliOs\",\"card__buttons\":\"Cards_card__buttons__12RwC\",\"card__info_btn\":\"Cards_card__info_btn__1G3BB\",\"card__edit_btn\":\"Cards_card__edit_btn__G5AED\",\"cards__footer\":\"Cards_cards__footer__3RIKz\",\"footer__select\":\"Cards_footer__select__263He\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Packs_header__3x5hY\",\"search__title\":\"Packs_search__title__Wjoxz\",\"search__field\":\"Packs_search__field__3LdMr\",\"search__btn\":\"Packs_search__btn__27DUT\",\"add\":\"Packs_add__3DlUG\",\"table\":\"Packs_table__1iz4_\",\"table__title\":\"Packs_table__title__3ExZi\",\"title__icons\":\"Packs_title__icons__1mMyg\",\"action__btns\":\"Packs_action__btns__1o47Q\",\"action__btn\":\"Packs_action__btn__1XTN5\",\"table__footer\":\"Packs_table__footer__1dxzV\",\"footer__select\":\"Packs_footer__select__2xJi_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__form\":\"Login_login__form__1eR2J\",\"form\":\"Login_form__3ARXm\",\"form__user\":\"Login_form__user__3maio\",\"form__username\":\"Login_form__username__vRFfB\",\"form__password\":\"Login_form__password__2-AQs\",\"form__remember\":\"Login_form__remember__Tcf-m\",\"form__forgot\":\"Login_form__forgot__3MwYm\",\"form__registration\":\"Login_form__registration__rebH_\",\"form__submit\":\"Login_form__submit__1zAwY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__form\":\"Registration_login__form__HaIXi\",\"form\":\"Registration_form__3PDko\",\"form__header\":\"Registration_form__header__34oh4\",\"form__email\":\"Registration_form__email__3VJM6\",\"form__password\":\"Registration_form__password__3BgCB\",\"form__submit\":\"Registration_form__submit__3KYHT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPass__form\":\"NewPassword_newPass__form__2AM1h\",\"form\":\"NewPassword_form__1xXZO\",\"form__header\":\"NewPassword_form__header__Bcsop\",\"form__password\":\"NewPassword_form__password__2V5l-\",\"form__submit\":\"NewPassword_form__submit__28XTl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header__block\":\"Header_header__block__2tjTw\",\"header__logo\":\"Header_header__logo__1ETZb\",\"header__links\":\"Header_header__links__3YLk3\",\"header__btns\":\"Header_header__btns__3jA7T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgot__form\":\"ForgotPassword_forgot__form__2beLg\",\"form\":\"ForgotPassword_form__1rcGm\",\"form__header\":\"ForgotPassword_form__header__2VQHG\",\"form__email\":\"ForgotPassword_form__email__3OKqH\",\"form__submit\":\"ForgotPassword_form__submit__kmCxW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3w-2P\",\"btn__active\":\"Paginator_btn__active__3wMHT\",\"btn\":\"Paginator_btn__28OSN\",\"icon__prev\":\"Paginator_icon__prev__PuDk_\",\"icon__next\":\"Paginator_icon__next__1wIC3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select__outer\":\"Select_select__outer__2lfb1\",\"select\":\"Select_select__3UVD7\",\"select__start\":\"Select_select__start__K7tar\",\"select__end\":\"Select_select__end__15WWR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal__wrapper\":\"ModalPopup_modal__wrapper__1olxh\",\"open\":\"ModalPopup_open__dL8Cc\",\"close\":\"ModalPopup_close__13oHL\",\"modal__inner\":\"ModalPopup_modal__inner__2erHY\",\"modal__title\":\"ModalPopup_modal__title__OcHZr\"};","export enum SortDirection {\n    nameUp = '0name',\n    nameDown = '1name',\n    countUp = '0cardsCount',\n    countDown = '1cardsCount',\n    updateUp = '0created',\n    updateDown = '1created'\n}","export default __webpack_public_path__ + \"static/media/enter.423cec00.svg\";","import { AuthResponseType } from '../../api/api';\n\nconst initialState = {} as AuthResponseType \n\nexport const profileReducer = (state = initialState, action: ProfileActionsType) => {\n    switch(action.type){\n\n        case 'SET_USER_PROFILE': \n            return {\n                ...state, \n                ...action.userData\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const setUserDataAC = (userData: AuthResponseType) => ({type: 'SET_USER_PROFILE', userData} as const)\n\n\n// types \nexport type SetUserDataActionType = ReturnType<typeof setUserDataAC>\n\nexport type ProfileActionsType = \n| SetUserDataActionType","import { GetPacksRequestType } from '../redux/packs-reducer/packs-reducer';\nimport axios from 'axios'\n\nconst settings = {\n    // baseURL: \"http://localhost:7542/2.0/\",\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\n    withCredentials: true\n}\n\nconst instance = axios.create(settings)\n\nexport const loginAPI = {\n    authMe: () => {\n        return instance.post<AuthResponseType>('auth/me')\n    },\n    registration: (data: { email: string, password: string }) => {\n        return instance.post<RegistrationResponseType>('auth/register', data)\n    },\n    logout: () => {\n        return instance.delete<MultiResponseType>('auth/me')\n    },\n    fetchLoginData: (data: { email: string, password: string, rememberMe: boolean }) => {\n        return instance.post<AuthResponseType>('auth/login', data)\n    },\n    forgotPass: (email: string) => {\n        return instance.post<MultiResponseType>('auth/forgot', {\n            email,\n            from: \"test-front-admin <ai73a@yandex.by>\",\n            message: `<div style=\"background-color: lime; padding: 15px\">\n                 password recovery link:\n                <a href='http://localhost:3000/#/set-new-password/$token$'>\n                 Reset Password</a></div>`\n        })\n    },\n    setNewPassword: (newPassData: NewPassDataType) => {\n        return instance.post<MultiResponseType>('auth/set-new-password', newPassData)\n    }\n}\n\n\nexport const packsAPI = {\n    getPacks: (paramsRequest: GetPacksRequestType) => {\n        return instance.get<PacksResponseType>('cards/pack', {params: paramsRequest})\n    },\n    addPack: (title: string) => {\n        return instance.post<OnPackActionResponseType>(`cards/pack`, {cardsPack: {name: title} })\n    },\n    deletePack: (id: string) => {\n        return instance.delete<OnPackActionResponseType>(`cards/pack?id=${id}`)\n    },\n    updatePack: (_id: string, name: string) => {\n        return instance.put<PacksResponseType>('cards/pack', {cardsPack: {_id, name}})\n    }\n}\n\nexport const cardsAPI = {\n    getCards: (requestParams: GetCardsRequestType) => {\n        return instance.get<GetCardsResponseType>('cards/card', {params: requestParams})\n    },\n    addCard: (data: {cardsPack_id: string, answer: string, question: string}) => {\n        return instance.post<AddCardResponseType>('cards/card', {card: data})\n    },\n    deleteCard: (id: string) => {\n        return instance.delete<DeleteCardResponseType>(`cards/card?id=${id}`)\n    },\n    updateCard: (data: {_id: string, question?: string, answer?: string, cardsPack_id: string}) => {\n        return instance.put<UpdatedCardResponseType>('cards/card', {card: data})\n    }\n}\n\n// export const profileAPI = {\n//     updateProfile: (data: {name: string, avatar: string}) => {\n//         return instance.put('auth/me', data)\n//     },\n// }\n\n// types\n\n// login\nexport type RegistrationResponseType = {\n    addedUser: Object\n    error?: string\n}\n\nexport type AuthResponseType = {\n    _id: string;\n    email: string;\n    name: string;\n    avatar?: string;\n    publicCardPacksCount: number; \n    created: Date;\n    updated: Date;\n    isAdmin: boolean;\n    verified: boolean; \t\n    rememberMe: boolean;\n    error?: string;\n    token: string\n    tokenDeathTime: number\n}\n\nexport type MultiResponseType = {\n    info: string,\n    error?: string\n}\n\nexport type NewPassDataType = {\n    password: string\n    resetPasswordToken: string | undefined\n}\n\n// profile ?\nexport type UpdateProfileResponseType = {\n    updatedUser: Object,    // Поправить, посмотреть что прилетает с бэка\n    error?: string\n}\n\n// packs\nexport type PacksResponseType = {\n    cardPacks: Array<PacksType>\t\t\t\t\t\n    cardPacksTotalCount: number\t\t\n    maxCardsCount: number\t\t\t\n    minCardsCount: number\t\t\t\n    page: number\t\t\t\n    pageCount: number\t\n    token: string\n    tokenDeathTime: number\t\n}\n\nexport type PacksType = {\n    _id: string\t\t\n    user_id: string\t\t\t\n    name: string\t\t\t\n    path: string\t\t\t\t\n    cardsCount: 25\t\t\t\n    grade: number\t\t\n    shots: number\n    rating: number\n    type: string\t\n    created: string\t\t\t\t\n    updated: string\t\t\t\n    __v: number\t\t\t\n}\n\nexport type OnPackActionResponseType = {\n    newCardsPack: {\n        cardsCount: number                         \n        created: string\n        grade: number \n        more_id: string\n        name: string\n        path: string\n        private: boolean\n        rating: number \n        shots: number \n        type: string\n        updated: string\n        user_id: string\n        user_name: string\n        __v: number \n        _id: string\n    }   \n    token: string\n    tokenDeathTime: number \n}\n\n\n\n// cards\nexport type CardType = {\n    answer: string\n    cardsPack_id: string\n    comments: string\n    created: string\n    grade: number\n    more_id: string\n    question: string\n    questionImg: string\n    rating: number\n    shots: number\n    type: string\n    updated: string\n    user_id: string\n    __v: number\n    _id: string\n}\n\nexport type GetCardsResponseType = {\n    cards: Array<CardType>\n    cardsTotalCount: number\n    maxGrade: number\n    minGrade: number\n    packUserId: string\n    page: number\n    pageCount: number\n    token: string\n    tokenDeathTime: number\n}\n\nexport type AddCardResponseType = {\n    newCard: Array<CardType>\n    token: string\n    tokenDeathTime: number\n}\n\nexport type DeleteCardResponseType = {\n    deleteCard: Array<CardType>\n    token: string\n    tokenDeathTime: number\n}\n\nexport type UpdatedCardResponseType = {\n    updatedCard: Array<CardType> & {\n        answerImg: string\n        answerVideo: string\n        questionVideo: string\n    }\n    token: string\n    tokenDeathTime: number\n}\n\n\n\n\nexport type GetCardsRequestType = {\n    cardAnswer?: string\n    cardQuestion?: string\t\n    cardsPack_id: string  \n    min?: number\n    max?: number\n    sortCards?: string\t\n    page?: number\n    pageCount?: number\n}\n\nexport type PostCardsRequestType = {\n    cardsPack_id: string\n    question: string\n    answer: string\n    grade?: number\n    shots?: number\n    rating?: number\n    answerImg?: string\n    questionImg?: string\t\n    questionVideo?: string\t\n    answerVideo?: string\n    type?: string\n}\n\n// export type UpdateCardRequestType = {     // card: {...}\n//     _id: string\t\n//     question?: string\t\t\n//     comments?: string\t\n// }\n","import { setUserDataAC, SetUserDataActionType } from './../profile-reducer/profile-reducer';\nimport { AppRootStateType } from './../store';\nimport { loginAPI } from '../../api/api';\nimport { ThunkDispatch, ThunkAction } from 'redux-thunk';\n\nconst initialState: InitialStateType = {\n    isLoggedIn: false,\n    error: ''\n}\n\nexport const loginReducer = (state: InitialStateType = initialState, action: LoginActionsType) => {\n    switch(action.type){\n\n        case 'SET_IS_LOGGED_IN':\n            return {\n                ...state,\n                isLoggedIn: action.isLoggedIn\n            }\n\n        case 'SET_ERROR_MESSAGE':\n            return {\n                ...state,\n                error: action.errorMessage\n            }\n\n        default:\n            return state\n    }\n}\n\n\n// actions\nexport const setIsLoggedInAC = (isLoggedIn: boolean) => ({type: 'SET_IS_LOGGED_IN', isLoggedIn} as const)\nexport const setErrorMessageAC = (errorMessage: string) => ({type: 'SET_ERROR_MESSAGE', errorMessage} as const)\n\n\n// thunks\nexport const loginTC = (formData: {email: string, password: string, rememberMe: boolean}): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            const {data} = await loginAPI.fetchLoginData(formData)\n            dispatch(setUserDataAC(data))\n            dispatch(setIsLoggedInAC(true))\n        }\n        catch(e){\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\nexport const logoutTC = (): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            await loginAPI.logout()\n            dispatch(setIsLoggedInAC(false))\n        }\n        catch(e){\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\n\n// types\ntype InitialStateType = {\n    isLoggedIn: boolean,\n    error: string\n}\n\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\n\nexport type LoginActionsType = \n| SetIsLoggedInActionType\n| ReturnType<typeof setErrorMessageAC>\n| SetUserDataActionType\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, LoginActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, LoginActionsType>\n","import React from 'react'\n\ninterface ITextErrorPropsType {\n    children?: React.ReactNode\n}\n\nconst stylesError = {\n    position: 'absolute' as const,\n    bottom: '-19px',\n    right: '0',\n    fontSize: '14px',\n    color: 'red'\n}\n\nexport const TextError: React.FC<ITextErrorPropsType> = (props) => {\n    return (\n        <div style={stylesError}>\n            {props.children}\n        </div>\n    )\n}","import React, { useEffect } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst AlertPopup: React.FC<ErrorPopupPropsType> = ({message, serverRequestSuccess}) => {\n\n    const viewMessage = () => {\n        if(message === 'user not found /ᐠ-ꞈ-ᐟ\\\\') return 'user not found'\n        if(message === 'not correct password /ᐠ-ꞈ-ᐟ\\\\') return 'not correct password'\n        if(message === 'not valid email/password /ᐠ-ꞈ-ᐟ\\\\') return 'not valid email/password'\n        if(message === 'email already exists /ᐠ｡ꞈ｡ᐟ\\\\') return 'that username is taken'\n        if(message === 'Email address not found /ᐠ-ꞈ-ᐟ\\\\') return 'email adress not found'\n        if(message === 'no resetPasswordToken, Check your request! /ᐠ-ꞈ-ᐟ\\\\') return 'please check your email and click on recovery link'\n        if(message === 'not your CardsPack! /ᐠ｡ꞈ｡ᐟ\\\\') return 'not your cards pack'\n        return 'server error'\n    }\n\n\n    // Без useEffect попап всплывает 2 раза\n    useEffect(() => {\n        if(message){\n            toast(viewMessage().toUpperCase())\n        }\n        if(serverRequestSuccess){\n            toast('success ✔️'.toUpperCase())\n        }\n    }, [message, serverRequestSuccess])\n  \n    return (\n        <div>\n            <ToastContainer  \n            position=\"bottom-right\"\n            autoClose={4000}\n            hideProgressBar\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover/>\n        </div>\n    )\n}\n\nexport default AlertPopup\n\n// types\ntype ErrorPopupPropsType = {\n    message?: string\n    serverRequestSuccess?: boolean | string\n}","export const validateEmail = (value: string) => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return !re.test(String(value).toLowerCase())\n}","import React, { useState, FocusEvent, useEffect } from 'react'\nimport enterImg from '../../assets/img/enter.svg'\nimport s from './Login.module.css'\nimport { NavLink, Redirect, useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loginTC } from '../../redux/login-reducer/login-reducer'\nimport { AppRootStateType } from '../../redux/store'\nimport { TextError } from '../../helpers/TextError'\nimport AlertPopup from '../../components/AlertPopup/AlertPopup'\nimport { validateEmail } from '../../helpers/validators/validators'\n\n\nconst LoginForm: React.FC = () => {\n\n    const [email, setEmail] = useState<string>('')\n    const [password, setPassword] = useState<string>('')\n    const [rememberMe, setRememberMe] = useState<boolean>(false)\n    const [emailTouched, setEmailTouched] = useState<boolean>(false)\n    const [passwordTouched, setPasswordTouched] = useState<boolean>(false)\n    const [emailError, setEmailError] = useState<string>('Email field is required')\n    const [passwordError, setPasswordError] = useState<string>('Password is required')\n    const [isFormValid, setIsFormValid] = useState<boolean>(false)\n\n    const dispatch = useDispatch()\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n    const serverErrorMessage = useSelector<AppRootStateType, string>((state) => state.login.error)\n\n    useEffect(() => {\n        if(emailError || passwordError){\n            setIsFormValid(false)\n        } else{\n            setIsFormValid(true)\n        }\n    }, [emailError, passwordError])\n\n    if(isLoggedIn){\n        return <Redirect to='/profile'/>\n    }\n\n    const emailChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(e.currentTarget.value)\n\n        const isValidEmail = validateEmail(e.currentTarget.value)\n        if (isValidEmail) {\n            setEmailError('Incorrect email format')\n            if(!e.currentTarget.value){\n                setEmailError('Email field is required')\n            }\n        } else {\n            setEmailError('') \n        }\n    }\n    const passwordChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setPassword(e.currentTarget.value)\n        if(e.currentTarget.value.length < 7){\n            setPasswordError('Min length 7 symbols')\n            if(!e.currentTarget.value){\n                setPasswordError('Password is required')\n            }\n        } else{\n            setPasswordError('')\n        }\n    }\n    const remeberMeChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setRememberMe(e.currentTarget.checked)\n    }\n\n\n    const blurHandler = (e: FocusEvent<HTMLInputElement>) => {\n        if(e.currentTarget.name === 'email'){\n            setEmailTouched(true)\n        }\n        if(e.currentTarget.name === 'password'){\n            setPasswordTouched(true)\n        }\n    }\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault()\n        dispatch(loginTC({email, password, rememberMe}))\n    }\n\n    return (\n        <>\n            <div className={s.login__form}>\n                <div className={s.form}>\n                    <div className={s.form__user}>\n                        <div>SIGN IN</div>\n                        <img src={enterImg} />\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className={s.form__username}>\n                            <div><label htmlFor='email'>username</label></div>\n                            <input \n                            type='text' \n                            id='email' \n                            name='email' \n                            value={email}\n                            onChange={emailChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(emailError && emailTouched) && <TextError>{emailError}</TextError>}\n                        </div>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='password'>password</label></div>\n                            <input \n                            type='password' \n                            id='password' \n                            name='password' \n                            value={password}\n                            onChange={passwordChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(passwordError && passwordTouched) && <TextError>{passwordError}</TextError>}\n                        </div>\n                        <div className={s.form__remember}>\n                            <div><label htmlFor='rememberMe'>remember me</label></div>\n                            <input \n                            type='checkbox' \n                            id='rememberMe' \n                            name='rememberMe' \n                            checked={rememberMe}\n                            onChange={remeberMeChangeHandler}/>\n                        </div>\n                        <div className={s.form__forgot}><NavLink to='/forgotpassword'>Forgot password ?</NavLink></div>\n                        <div className={s.form__registration}><NavLink to='/registration'>Registration here</NavLink></div>\n                        <div className={s.form__submit}>\n                            <button type='submit' disabled={!isFormValid}>Login</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <AlertPopup message={serverErrorMessage} serverRequestSuccess={isLoggedIn}/>\n        </>\n    )\n}\n\n\n\nexport default LoginForm\n","export default __webpack_public_path__ + \"static/media/note.129a606a.svg\";","import { loginAPI } from '../../api/api';\nimport { AppRootStateType } from './../store';\nimport { ThunkDispatch, ThunkAction } from \"redux-thunk\"\n\nconst initialState: InitialStateType = {\n    isRegisterSuccess: false,\n    error: ''\n}\n\nexport const registrationReducer = (state: InitialStateType = initialState, action: RegistrationActionsType) => {\n    switch(action.type){\n        case 'SET_IS_REGISTER_SUCCESS':\n            return {\n                ...state,\n                isRegisterSuccess: action.isRegister\n            }\n\n        case 'SET_ERROR_MESSAGE':\n            return {\n                ...state,\n                error: action.errorMessage\n            }\n\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setIsRegisterSuccessAC = (isRegister: boolean) => ({type: 'SET_IS_REGISTER_SUCCESS', isRegister} as const)\nexport const setErrorMessageAC = (errorMessage: string) => ({type: 'SET_ERROR_MESSAGE', errorMessage} as const)\n\n// thunks\nexport const registrationTC = (data: {email: string, password: string}): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            await loginAPI.registration(data)\n            dispatch(setIsRegisterSuccessAC(true))\n        } catch(e){\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\n\n// types\ntype InitialStateType = {\n    isRegisterSuccess: boolean,\n    error: string\n}\n\nexport type RegistrationActionsType = \n| ReturnType<typeof setIsRegisterSuccessAC>\n| ReturnType<typeof setErrorMessageAC>\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, RegistrationActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, RegistrationActionsType>\n","import React, { useState, FocusEvent, useEffect } from 'react'\nimport noteImg from '../../assets/img/note.svg'\nimport s from './Registration.module.css'\nimport { Redirect, useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppRootStateType } from '../../redux/store'\nimport { TextError } from '../../helpers/TextError'\nimport AlertPopup from '../../components/AlertPopup/AlertPopup'\nimport { registrationTC, setIsRegisterSuccessAC } from '../../redux/registration-reducer/registration-reducer'\nimport { validateEmail } from '../../helpers/validators/validators'\n\n\nconst Registration: React.FC = () => {\n\n    const [email, setEmail] = useState<string>('')\n    const [password, setPassword] = useState<string>('')\n    const [passwordConfirm, setPasswordConfirm] = useState<string>('')\n    const [emailTouched, setEmailTouched] = useState<boolean>(false)\n    const [passwordTouched, setPasswordTouched] = useState<boolean>(false)\n    const [passwordConfirmTouched, setPasswordConfirmTouched] = useState<boolean>(false)\n    const [emailError, setEmailError] = useState<string>('Email field is required')\n    const [passwordError, setPasswordError] = useState<string>('Password is required')\n    const [passwordConfirmError, setPasswordConfirmError] = useState<string>('Password is required')\n    const [isFormValid, setIsFormValid] = useState<boolean>(false)\n\n    useEffect(() => {\n        if(emailError || passwordError || passwordConfirmError){\n            setIsFormValid(false)\n        } else {\n            setIsFormValid(true)\n        }\n    }, [emailError, passwordError, passwordConfirmError])\n\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const isRegisterSuccess = useSelector<AppRootStateType, boolean>((state) => state.registration.isRegisterSuccess)\n    const serverErrorMessage = useSelector<AppRootStateType, string>((state) => state.registration.error)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n\n    useEffect(() => {\n        if(isRegisterSuccess) {\n            setTimeout(() => {\n                history.push('/login')\n                dispatch(setIsRegisterSuccessAC(false))\n            }, 3000)\n        }    \n    }, [isRegisterSuccess])\n\n\n    if(isLoggedIn){\n        return <Redirect to='/profile'/>\n    }\n\n\n    const emailChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(e.currentTarget.value)\n\n        const isValidEmail = validateEmail(e.currentTarget.value)\n        if (isValidEmail) {\n            setEmailError('Incorrect email format')\n            if(!e.currentTarget.value){\n                setEmailError('Email field is required')\n            }\n        } else {\n            setEmailError('')  \n        }\n    }\n\n    const passwordValidation = (password: string, setState: Function, setError: Function) => {\n        setState(password)\n        if(password.length < 7){\n            setError('Min length 7 symbols')\n            if(!password){\n                setError('Password is required')\n            }\n        } else{\n            setError('')\n        }\n    }\n\n    const passwordChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if(e.currentTarget.name === 'password'){\n            passwordValidation(e.currentTarget.value, setPassword, setPasswordError)\n        }\n        if(e.currentTarget.name === 'passwordConfirm'){\n            passwordValidation(e.currentTarget.value, setPasswordConfirm, setPasswordConfirmError)\n        }\n    }\n \n\n    const blurHandler = (e: FocusEvent<HTMLInputElement>) => {\n        if(e.currentTarget.name === 'email'){\n            setEmailTouched(true)\n        }\n        if(e.currentTarget.name === 'password'){\n            setPasswordTouched(true)\n        }\n        if(e.currentTarget.name === 'passwordConfirm'){\n            setPasswordConfirmTouched(true)\n        }\n    }\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault()\n        if(password !== passwordConfirm){\n            setPasswordConfirmError('Different passwords')\n        } else {\n            dispatch(registrationTC({email, password}))\n        }\n    }\n\n    return (\n        <>\n            <div className={s.login__form}>\n                <div className={s.form}>\n                    <div className={s.form__header}>\n                        <div>REGISTRATION</div>\n                        <img src={noteImg}/>\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className={s.form__email}>\n                            <div><label htmlFor='email'>email</label></div>\n                            <input \n                            type='text' \n                            id='email' \n                            name='email' \n                            value={email}\n                            onChange={emailChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(emailError && emailTouched) && <TextError>{emailError}</TextError>}\n                        </div>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='password'>password</label></div>\n                            <input \n                            type='password' \n                            id='password' \n                            name='password' \n                            value={password}\n                            onChange={passwordChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(passwordError && passwordTouched) && <TextError>{passwordError}</TextError>}\n                        </div>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='passwordConfirm'>confirm password</label></div>\n                            <input \n                            type='password' \n                            id='passwordConfirm' \n                            name='passwordConfirm' \n                            value={passwordConfirm}\n                            onChange={passwordChangeHandler}\n                            onBlur={blurHandler}/>\n                            {(passwordConfirmError && passwordConfirmTouched) && <TextError>{passwordConfirmError}</TextError>}\n                        </div>\n                        <div className={s.form__submit}>\n                            <button type='submit' disabled={!isFormValid}>Sign up</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <AlertPopup message={serverErrorMessage} serverRequestSuccess={isRegisterSuccess}/>\n        </>\n    )\n}\n\n\n\nexport default Registration\n\n","import React from 'react'\nimport s from './Header.module.css'\nimport { NavLink, Redirect } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { logoutTC } from '../../redux/login-reducer/login-reducer'\nimport { AppRootStateType } from '../../redux/store'\n\nconst Header = () => {\n\n    const isLoggedIn = useSelector<AppRootStateType>((state) => state.login.isLoggedIn)\n    const dispatch = useDispatch()\n\n    const logout = () => {\n        dispatch(logoutTC())\n    }\n\n    const login = () => {\n        return <Redirect to='/login'/>\n    }\n\n    return (\n        <div>\n            <div className={s.header__block}>\n                <div className={s.header__logo}>LOGO</div>\n                <div className={s.header__links}>\n                    <NavLink to='/login'>Login</NavLink>\n                    <NavLink to='/registration'>Registration</NavLink>\n                    <NavLink to='/profile'>Profile</NavLink>\n                    <NavLink to='/newpassword'>New Password</NavLink>\n                    <NavLink to='/forgotpassword'>Forgot Password</NavLink>\n                    <NavLink to='/packs'>Packs</NavLink>\n                    <NavLink to='/cards'>Cards</NavLink>\n                    <NavLink to='/test'>Test</NavLink>\n                </div>\n                {isLoggedIn\n                  ? <div className={s.header__btns}><button onClick={logout}>Log out</button></div>\n                  : <div className={s.header__btns}><button onClick={login}>Login</button></div>}\n                \n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppRootStateType} from \"../store\";\nimport {loginAPI} from \"../../api/api\";\n\nconst initialState: InitialForgotStateType = {\n    info: '',\n    error: ''\n}\n\nexport const forgotReducer = (state = initialState, action: ForgotPassActionsType): InitialForgotStateType => {\n    switch (action.type) {\n\n        case 'forgot/SET_INFO': \n            return {\n                ...state,\n                info: action.info\n            }\n\n        case 'forgot/SET_ERROR': \n            return {\n                ...state,\n                error: action.error\n            }\n\n        default:\n            return state\n    }\n}\n\n\n//actions\nexport const setInfoAC = (info: string) => ({type: 'forgot/SET_INFO',  info} as const)\nexport const setErrorAC = (error: string) => ({type: 'forgot/SET_ERROR', error} as const)\n\n//thunks\nexport const forgotPassTC = (email: string): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            const res = await loginAPI.forgotPass(email)\n            dispatch(setInfoAC(res.data.info))\n        } catch(e){\n            dispatch(setErrorAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorAC(''))\n        }\n    }\n}\n\n\n//types\nexport type InitialForgotStateType = {\n    info: string\n    error: string\n}\nexport type ForgotPassActionsType = \n| ReturnType<typeof setInfoAC>\n| ReturnType<typeof setErrorAC>\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, ForgotPassActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ForgotPassActionsType>\n","export default __webpack_public_path__ + \"static/media/key.4ca8f8c2.svg\";","import React, {FocusEvent, useEffect, useState} from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Redirect, useHistory} from 'react-router-dom';\nimport {forgotPassTC, setInfoAC} from '../../redux/forgot-reducer/forgot-reducer';\nimport {AppRootStateType} from \"../../redux/store\";\nimport s from \"../forgot-password/ForgotPassword.module.css\";\nimport {TextError} from \"../../helpers/TextError\";\nimport forgot from \"../../assets/img/key.svg\";\nimport AlertPopup from '../../components/AlertPopup/AlertPopup';\nimport { validateEmail } from '../../helpers/validators/validators';\n\n\nconst ForgotPasswordForm = () => {\n\n    const [email, setEmail] = useState<string>('')\n    const [emailTouched, setEmailTouched] = useState<boolean>(false)\n    const [emailError, setEmailError] = useState<string>('Email field is required')\n    const [isFormValid, setIsFormValid] = useState<boolean>(false)\n\n    const sendMessageSuccess = useSelector<AppRootStateType, string>((state) => state.forgot.info)\n    const serverErrorMessage = useSelector<AppRootStateType, string>((state) => state.forgot.error)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        if (emailError) {\n            setIsFormValid(false)\n        } else{\n            setIsFormValid(true)\n        }\n    }, [emailError])\n\n    useEffect(() => {\n        if(sendMessageSuccess){\n            setTimeout(() => {\n                history.push('/login')\n                dispatch(setInfoAC(''))\n            }, 3000)\n        }    \n    }, [sendMessageSuccess])\n\n    \n    if(isLoggedIn){\n        return <Redirect to='/profile'/>\n    }\n\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault()\n        dispatch(forgotPassTC(email))\n    }\n\n    const emailChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(e.currentTarget.value)\n        \n        const isValidEmail = validateEmail(e.currentTarget.value)\n        if (isValidEmail) {\n            setEmailError('Incorrect email format')\n            if (!e.currentTarget.value) {\n                setEmailError('Email field is required')\n            }\n        } else {\n            setEmailError('')\n        }\n    }\n\n    const blurHandler = (e: FocusEvent<HTMLInputElement>) => {\n        if (e.currentTarget.name === 'email') {\n            setEmailTouched(true)\n        }\n    }\n    \n\n    return (\n        <>\n            <div className={s.forgot__form}>\n                <div className={s.form}>\n                    <div className={s.form__header}>\n                        <div>Forgot Password</div>\n                        <img src={forgot}/>\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className={s.form__email}>\n                            <div><label htmlFor='email'>Enter valid email</label></div>\n                            <input\n                                type='text'\n                                id='email'\n                                name='email'\n                                value={email}\n                                onChange={emailChangeHandler}\n                                onBlur={blurHandler}/>\n                            {(emailError && emailTouched) && <TextError>{emailError}</TextError>}\n                        </div>\n                        <div className={s.form__submit}>\n                            <button type='submit' disabled={!isFormValid}>Send</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <AlertPopup message={serverErrorMessage} serverRequestSuccess={sendMessageSuccess}/>\n            {/* Email address not found /ᐠ-ꞈ-ᐟ\\\\ */}\n            {/* sent —ฅ/ᐠ.̫ .ᐟ\\\\ฅ— */}\n        </>\n\n    )\n}\n\n\nexport default ForgotPasswordForm\n\n","import {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppRootStateType} from \"../store\";\nimport {loginAPI} from \"../../api/api\";\n\n\nconst initialState: InitialSetNewPassType = {\n    info: '',\n    error: ''\n}\n\n\nexport const passwordReducer = (state = initialState, action: PasswordActionsType): InitialSetNewPassType => {\n    switch (action.type) {\n\n        case 'password/SET_INFO': \n            return {\n                ...state,\n                info: action.info\n            }\n\n        case 'password/SET_ERROR': \n            return {\n                ...state,\n                error: action.error\n            }\n\n        default:\n            return state\n    }\n}\n\n\n//actions\nconst setInfoAC = (info: string) => ({type: 'password/SET_INFO', info} as const)\nconst setErrorAC = (error: string) => ({type: 'password/SET_ERROR', error} as const)\n\n//thunks\nexport const newPasswordTC = (password: string, resetPasswordToken: string | undefined): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            const res = await loginAPI.setNewPassword({password, resetPasswordToken})\n            dispatch(setInfoAC(res.data.info))\n        } catch(e){\n            dispatch(setErrorAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorAC(''))\n        }\n    }\n}\n\n\n//types\nexport type InitialSetNewPassType = {\n    info: string\n    error: string\n}\nexport type PasswordActionsType = \n| ReturnType<typeof setInfoAC>\n| ReturnType<typeof setErrorAC>\n\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, PasswordActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, PasswordActionsType>\n","export default __webpack_public_path__ + \"static/media/rotation-lock.fb2f4187.svg\";","import React, {FocusEvent, useEffect, useState} from 'react'\nimport s from './NewPassword.module.css'\nimport {useHistory, useParams, Redirect} from 'react-router-dom'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../redux/store'\nimport {TextError} from '../../helpers/TextError'\nimport AlertPopup from '../../components/AlertPopup/AlertPopup'\nimport {newPasswordTC} from \"../../redux/password-reducer/password-reducer\";\nimport resetImg from './../../../src/assets/img/rotation-lock.svg'\nimport { setInfoAC } from '../../redux/forgot-reducer/forgot-reducer'\n\nconst NewPassword: React.FC = () => {\n\n    const [password, setPassword] = useState<string>('')\n    const [passwordConfirm, setPasswordConfirm] = useState<string>('')\n    const [passwordTouched, setPasswordTouched] = useState<boolean>(false)\n    const [passwordConfirmTouched, setPasswordConfirmTouched] = useState<boolean>(false)\n    const [passwordError, setPasswordError] = useState<string>('Password is required')\n    const [passwordConfirmError, setPasswordConfirmError] = useState<string>('Password is required')\n    const [isFormValid, setIsFormValid] = useState<boolean>(false)\n    const {token} = useParams<{ token?: string }>()\n\n    const changePasswordSuccess = useSelector<AppRootStateType, string>((state) => state.password.info)\n    const serverErrorMessage = useSelector<AppRootStateType, string>((state) => state.password.error)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        if (passwordError || passwordConfirmError) {\n            setIsFormValid(false)\n        } else {\n            setIsFormValid(true)\n        }\n    }, [passwordError, passwordConfirmError])\n\n\n    useEffect(() => {\n        if (changePasswordSuccess) {\n            setTimeout(() => {\n                history.push('/login')\n                dispatch(setInfoAC(''))\n            }, 3000)\n        }\n    }, [changePasswordSuccess])\n\n\n    if(isLoggedIn){\n        return <Redirect to='/profile'/>\n    }\n\n\n    const passwordValidation = (password: string, setState: Function, setError: Function) => {\n        setState(password)\n        if (password.length < 7) {\n            setError('Min length 7 symbols')\n            if (!password) {\n                setError('Password is required')\n            }\n        } else {\n            setError('')\n        }\n    }\n\n    const passwordChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget.name === 'password') {\n            passwordValidation(e.currentTarget.value, setPassword, setPasswordError)\n        }\n        if (e.currentTarget.name === 'passwordConfirm') {\n            passwordValidation(e.currentTarget.value, setPasswordConfirm, setPasswordConfirmError)\n        }\n    }\n\n\n    const blurHandler = (e: FocusEvent<HTMLInputElement>) => {\n\n        if (e.currentTarget.name === 'password') {\n            setPasswordTouched(true)\n        }\n        if (e.currentTarget.name === 'passwordConfirm') {\n            setPasswordConfirmTouched(true)\n        }\n    }\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault()\n        if (password !== passwordConfirm) {\n            setPasswordConfirmError('Different passwords')\n        } else {\n            dispatch(newPasswordTC(password, token))\n        }\n    }\n\n\n    return (\n        <>\n            <div className={s.newPass__form}>\n                <div className={s.form}>\n                    <div className={s.form__header}>\n                        <div>Set New Password</div>\n                        <img src={resetImg}/>\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='password'>password</label></div>\n                            <input\n                                type='password'\n                                id='password'\n                                name='password'\n                                value={password}\n                                onChange={passwordChangeHandler}\n                                onBlur={blurHandler}/>\n                            {(passwordError && passwordTouched) && <TextError>{passwordError}</TextError>}\n                        </div>\n                        <div className={s.form__password}>\n                            <div><label htmlFor='passwordConfirm'>confirm password</label></div>\n                            <input\n                                type='password'\n                                id='passwordConfirm'\n                                name='passwordConfirm'\n                                value={passwordConfirm}\n                                onChange={passwordChangeHandler}\n                                onBlur={blurHandler}/>\n                            {(passwordConfirmError && passwordConfirmTouched) &&\n                            <TextError>{passwordConfirmError}</TextError>}\n                        </div>\n                        <div className={s.form__submit}>\n                            <button type='submit' disabled={!isFormValid}>Set New Password</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <AlertPopup message={serverErrorMessage} serverRequestSuccess={changePasswordSuccess}/>   \n        </>\n    )\n}\n\n\nexport default NewPassword\n\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppRootStateType } from '../../redux/store'\nimport { Redirect } from 'react-router-dom'\n\nconst Profile = () => {\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n\n    if(!isLoggedIn){\n        return <Redirect to='/login'/>\n    }\n\n    return (\n        <div>\n            Profile Component\n        </div>\n    )\n}\n\nexport default Profile\n","import { setIsLoggedInAC, SetIsLoggedInActionType } from './../login-reducer/login-reducer';\nimport {setUserDataAC, SetUserDataActionType} from './../profile-reducer/profile-reducer';\nimport { loginAPI } from '../../api/api';\nimport { AppRootStateType } from './../store';\nimport { ThunkDispatch, ThunkAction } from \"redux-thunk\"\n\n\nconst initialState: InitialStateType = {\n    isAppInicialized: false,\n    error: ''\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType) => {\n    switch(action.type){\n        case 'app/SET_APP_INICIALIZED': \n            return {\n                ...state,\n                isAppInicialized: action.isInicialized\n            }\n        \n        case 'app/SET_ERROR_MESSAGE': {\n            return {\n                ...state,\n                error: action.errorMessage\n            }\n        }\n\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setAppInicializedAC = (isInicialized: boolean) => ({type: 'app/SET_APP_INICIALIZED', isInicialized} as const)\nexport const setErrorMessageAC = (errorMessage: string) => ({type: 'app/SET_ERROR_MESSAGE', errorMessage} as const)\n\n// thunks\nexport const appInicializeTC = (): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            const res = await loginAPI.authMe()\n            dispatch(setUserDataAC(res.data))\n            dispatch(setIsLoggedInAC(true))\n        } catch(e){\n            dispatch(setErrorMessageAC('Please, authorized'))  \n        } finally{\n            dispatch(setAppInicializedAC(true))\n        }\n    }\n}\n\n// types\ntype InitialStateType = {\n    isAppInicialized: boolean\n    error: string\n}\n\nexport type AppActionsType = \n| ReturnType<typeof setAppInicializedAC>\n| ReturnType<typeof setErrorMessageAC>\n| SetUserDataActionType\n| SetIsLoggedInActionType\n\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, AppActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, AppActionsType>","export default __webpack_public_path__ + \"static/media/preloader.8d5bc12c.svg\";","import React from 'react'\nimport preloader from '../../assets/img/preloader.svg'\n\nconst preloaderStyles = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    height: '100vh'\n}\n\nconst Preloader: React.FC = () => {\n    return (\n        <div style={preloaderStyles}>\n            <div><img src={preloader} /></div>\n        </div>\n    )\n}\n\nexport default Preloader\n","import { AppRootStateType } from './../store';\nimport { PacksType } from '../../api/api';\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {packsAPI} from \"../../api/api\";\n\n\nconst initialState: InitialState = {\n    packs: [],\n    packsTotalCount: 0,\n    error: '',\n    requestParams: {\n        packName: '',\n        min: 0,\n        max: 0,\n        sortPacks: '0updated',\n        page: 1,\n        pageCount: 10,\n        userId: '',\n        // token: ''\n    },\n    isPackActionSuccess: false\n}\n\nexport const packsReducer = (state = initialState, action: PacksActionsType): InitialState => {\n    switch (action.type) {\n\n        case 'packs/SET_PACKS':\n            return {\n                ...state,\n                packs: action.packs,\n                packsTotalCount: action.cardPacksTotalCount\n            }\n\n        case 'packs/SET_ERROR_MESSAGE':\n            return {\n                ...state,\n                error: action.errorMessage\n            }\n\n        case 'packs/UPDATE_PARAMS_REQUEST':\n            return {\n                ...state,\n                requestParams: {...state.requestParams, ...action.newParams}\n            }\n\n        case 'packs/SET_PACK_ACTION_STATUS':\n            return {\n                ...state,\n                isPackActionSuccess: action.isSuccess\n            }   \n            \n        default:\n            return state\n    }\n}\n\n\n//actions\nexport const setPacksAC = (packs: Array<PacksType>, cardPacksTotalCount: number) => {\n    return {type: 'packs/SET_PACKS' as const, packs, cardPacksTotalCount}\n} \n\nconst updateRequestParamsAC = (newParams: GetPacksRequestType) => ({type: 'packs/UPDATE_PARAMS_REQUEST', newParams} as const)\nconst setErrorMessageAC = (errorMessage: string) => ({type: 'packs/SET_ERROR_MESSAGE', errorMessage} as const)\nexport const setPackActionStatusAC = (isSuccess: boolean) => ({type: 'packs/SET_PACK_ACTION_STATUS', isSuccess} as const) \n\n\n//thunks\nexport const getPacksTC = (params: GetPacksRequestType): ThunkType => {\n    return async (dispatch: DispatchType, getState: () => AppRootStateType) => {\n        try {\n            dispatch(updateRequestParamsAC(params))\n            const newParams = getState().packs.requestParams\n            const res = await packsAPI.getPacks(newParams)\n            dispatch(setPacksAC(res.data.cardPacks, res.data.cardPacksTotalCount))\n        } catch (e) {\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\nexport const addNewPackTC = (title: string, params: GetPacksRequestType): ThunkType => {\n    return async (dispatch: DispatchType, getState: () => AppRootStateType) => {\n        try {\n            dispatch(updateRequestParamsAC(params))\n            await packsAPI.addPack(title)\n            dispatch(setPackActionStatusAC(true))\n            dispatch(getPacksTC(getState().packs.requestParams))\n        } catch (e) {\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\nexport const deletePackTC = (id: string): ThunkType => {\n    return async (dispatch: DispatchType, getState: () => AppRootStateType) => {\n        try {\n            await packsAPI.deletePack(id)\n            dispatch(setPackActionStatusAC(true))\n            dispatch(getPacksTC(getState().packs.requestParams))\n        } catch (e) {\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\nexport const UpdatePackTC = (_id: string, newTitle: string): ThunkType => {\n    return async (dispatch: DispatchType, getState: () => AppRootStateType) => {\n        try {\n            await packsAPI.updatePack(_id, newTitle)\n            dispatch(setPackActionStatusAC(true))\n            dispatch(getPacksTC(getState().packs.requestParams))\n        } catch (e) {\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\n\n\n//types\ntype InitialState = {\n    packs: Array<PacksType>\n    packsTotalCount: number\n    error: string\n    requestParams: GetPacksRequestType\n    isPackActionSuccess: boolean\n}\n\nexport type PacksActionsType =\n| ReturnType<typeof setPacksAC>\n| ReturnType<typeof setErrorMessageAC>\n| ReturnType<typeof updateRequestParamsAC>\n| ReturnType<typeof setPackActionStatusAC>\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, PacksActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, PacksActionsType>\n\n\n// Перенести в API\nexport type GetPacksRequestType = {\n    packName?: string\n    min?: number\n    max?: number\n    sortPacks?: string \n    page?: number\n    pageCount?: number\n    userId?: string\n    token?: string\n}","import React, { useState } from 'react'\nimport s from './Paginator.module.css'\nimport { FiChevronRight as RigthIcon } from 'react-icons/fi'\nimport { FiChevronLeft as LeftIcon } from 'react-icons/fi'\n\nconst Paginator: React.FC<PaginatorPropsType> = ({totalItemsCount, itemsOnPage, currentPage, onPageChange}) => {\n\n    const [portionNumber, setPortionNumber] = useState(1)\n\n    const pagesCount = Math.ceil(totalItemsCount/itemsOnPage)\n\n    const pages = []\n\n    for(let i = 1; i <= pagesCount; i++){\n        pages.push(i)\n    }\n\n    const portionCount = Math.ceil(pagesCount/10) // Количество порций отображаемых страниц по 10\n\n    const leftPortionPageNumber = (portionNumber - 1) * 10 + 1\n    const rightPortionPageNumber = portionNumber * 10\n\n    return (\n        <div className={s.paginator}>\n            {portionNumber > 1\n            ? <LeftIcon size='20' onClick={() => setPortionNumber(portionNumber - 1)} className={s.icon__prev}/>\n            : ''}\n\n            {pages\n            .filter((page) => page >= leftPortionPageNumber && page <= rightPortionPageNumber ) \n            .map((page) => {\n                return <span key={page} className={currentPage === page ? s.btn__active: s.btn}\n                onClick={ () => {onPageChange(page)}}>{page + ' '}</span>\n                })}\n\n            {portionCount > portionNumber \n            ? <RigthIcon size='20' onClick={() => setPortionNumber(portionNumber + 1)} className={s.icon__next}/>\n            : ''} \n        </div>\n    )\n}\n\nexport default Paginator\n\ntype PaginatorPropsType = {\n    totalItemsCount: number\n    itemsOnPage: number\n    currentPage: number\n    onPageChange: (pageNumber: number) => void\n}","import React, { ChangeEvent } from 'react'\nimport s from './Select.module.css'\n\nconst Select: React.FC<PropsType> = ({onSelectValue, selectValues}) => {\n    return (\n        <div className={s.select__outer}>\n            <span className={s.select__start}>Show</span>\n            <select className={s.select} onChange={onSelectValue}>\n                {selectValues.map((itemsOnPage) => (\n                    <option key={itemsOnPage} value={itemsOnPage}>{itemsOnPage}</option>\n                ))}\n            </select>\n            <span className={s.select__end}>Packs per page</span>\n        </div>\n    )\n}\n\nexport default Select\n\ntype PropsType = {\n    onSelectValue: (e: ChangeEvent<HTMLSelectElement>) => void\n    selectValues: Array<number>\n}","import React, { SyntheticEvent } from 'react'\nimport s from './ModalPopup.module.css'\n\nconst ModalPopup: React.FC<ModalPopupPropsType > = ({show, setShow, children}) => {\n    \n    return (\n        <div \n        className={`${s.modal__wrapper} + ${show ? s.open : s.close}`}\n        onClick={() => setShow(false)}>\n            <div \n            className={s.modal__inner}\n            onClick={(e: SyntheticEvent) => e.stopPropagation()}>\n                <div>\n                    {children}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ModalPopup\n\ntype ModalPopupPropsType = {\n    show: boolean\n    setShow: (value: boolean) => void\n}","import React, { ChangeEvent, useState, useEffect } from 'react'\nimport ModalPopup from '../../../components/ModalPopup/ModalPopup'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addNewPackTC, setPackActionStatusAC } from '../../../redux/packs-reducer/packs-reducer'\nimport { SortDirection } from '../../../helpers/enum'\nimport { AppRootStateType } from '../../../redux/store'\n\nconst AddPackModal: React.FC<PropsType> = ({show, setShow}) => {\n\n    const dispatch = useDispatch()\n\n    const [packName, setPackName] = useState<string>('')\n\n    const isAddPackSuccess = useSelector<AppRootStateType, boolean>((state) => state.packs.isPackActionSuccess)\n\n    useEffect(() => {\n        setShow(false)\n        dispatch(setPackActionStatusAC(false))\n        setPackName('')\n    }, [isAddPackSuccess])\n\n    const AddPackNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setPackName(e.currentTarget.value)\n    }\n\n    const onAddCard = () => {   // packName - сортировка по имени колод\n        dispatch(addNewPackTC(packName, {sortPacks: SortDirection.updateUp, packName: '', page: 1}))\n    }\n\n    return (\n        <div>\n            <ModalPopup show={show} setShow={setShow}>\n                {\n                    <>\n                        <div><input onChange={AddPackNameHandler} value={packName}/></div>\n                        <div><button onClick={onAddCard}>ADD</button></div>\n                    </>\n                }\n            </ModalPopup>\n        </div>\n    )\n}\n\nexport default AddPackModal\n\ntype PropsType = {\n    show: boolean\n    setShow: (value: boolean) => void\n}","import React, { useEffect } from 'react'\nimport ModalPopup from '../../../components/ModalPopup/ModalPopup'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { deletePackTC, setPackActionStatusAC } from '../../../redux/packs-reducer/packs-reducer'\nimport { AppRootStateType } from '../../../redux/store'\n\nconst ModalDeletePack: React.FC<PropsType> = ({show, setShow, packId}) => {\n\n    const dispatch = useDispatch()\n\n    const isDeleteSuccess = useSelector<AppRootStateType, boolean>((state) => state.packs.isPackActionSuccess)\n\n    useEffect(() => {\n        setShow(false)\n        dispatch(setPackActionStatusAC(false))\n    }, [isDeleteSuccess])\n\n    const onDeleteClick = () => {\n        dispatch(deletePackTC(packId))\n    }\n\n    return (\n        <div>\n            <ModalPopup show={show} setShow={setShow}>\n                {\n                    <>\n                        <div>Are you sure ?</div>\n                        <div><button onClick={onDeleteClick}>DELETE</button></div>\n                    </>\n                }\n            </ModalPopup>\n        </div>\n    )\n}\n\ntype PropsType = {\n    show: boolean\n    setShow: (value: boolean) => void\n    packId: string\n}\n\nexport default ModalDeletePack\n","import React, { useState, ChangeEvent, useEffect } from 'react'\nimport ModalPopup from '../../../components/ModalPopup/ModalPopup'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { UpdatePackTC, setPackActionStatusAC } from '../../../redux/packs-reducer/packs-reducer'\nimport { AppRootStateType } from '../../../redux/store'\n\nconst ModalEditPack: React.FC<PropsType> = ({show, setShow, packId, packName}) => {\n\n    const dispatch = useDispatch()\n\n    const [newPackName, setNewPackName] = useState<string>('')\n\n    const isEditSuccess = useSelector<AppRootStateType, boolean>((state) => state.packs.isPackActionSuccess)\n\n    useEffect(() => {\n        setNewPackName(packName)\n    }, [packName])\n\n    useEffect(() => {\n        setShow(false)\n        dispatch(setPackActionStatusAC(false))\n    }, [isEditSuccess])\n\n    const namePackEditHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewPackName(e.currentTarget.value)\n    }\n\n    const onUpdateClick = () => {\n        dispatch(UpdatePackTC(packId, newPackName))\n    }\n\n    return (\n        <div>\n            <ModalPopup show={show} setShow={setShow}>\n                {\n                    <> \n                        <input onChange={namePackEditHandler} value={newPackName}/>\n                        <div><button onClick={onUpdateClick}>UPDATE</button></div>\n                    </>\n                }\n            </ModalPopup>\n        </div>\n    )\n}\n\nexport default ModalEditPack\n\ntype PropsType = {\n    show: boolean\n    setShow: (value: boolean) => void\n    packId: string\n    packName: string\n}","import React, { useMemo, useEffect, useState, ChangeEvent } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { AppRootStateType } from '../../redux/store'\nimport { PacksType } from '../../api/api'\nimport s from './Packs.module.css'\nimport { getPacksTC, GetPacksRequestType } from '../../redux/packs-reducer/packs-reducer'\nimport { Redirect, NavLink } from 'react-router-dom'\nimport { SortDirection } from '../../helpers/enum'\nimport { BiEdit as EditIcon } from 'react-icons/bi'\nimport { TiDeleteOutline as DeleteIcon } from 'react-icons/ti'\nimport { MdAddCircleOutline as AddIcon } from 'react-icons/md'\nimport { BsCaretUpFill as UpIcon } from 'react-icons/bs'\nimport { BsCaretDownFill as DownIcon } from 'react-icons/bs'\nimport AlertPopup from '../../components/AlertPopup/AlertPopup'\nimport Paginator from '../../components/Paginator/Paginator'\nimport Select from '../../components/Select/Select'\nimport AddPackModal from './modals/AddPackModal'\nimport ModalDeletePack from './modals/ModalDeletePack'\nimport ModalEditPack from './modals/ModalEditPack'\n\nconst Packs = () => {\n\n    const dispatch = useDispatch()\n\n    const [searchName, setSearchName] = useState('')\n    const [currentPage, setCurrentPage] = useState<number>(1)\n    const [modalAddShow, setModalAddShow] = useState<boolean>(false)\n    const [modalDeleteShow, setModalDeleteShow] = useState<boolean>(false)\n    const [modalData, setModalData] = useState<ModalDataType>({} as ModalDataType)\n    const [modalEditShow, setModalEditShow] = useState<boolean>(false)\n\n    const packs = useSelector<AppRootStateType, PacksType[]>((state) => state.packs.packs)\n    const serverErrorMessage = useSelector<AppRootStateType, string>((state) => state.packs.error)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n    const requestParams = useSelector<AppRootStateType, GetPacksRequestType>((state) => state.packs.requestParams) \n    const packsTotalCount = useSelector<AppRootStateType, number>((state) => state.packs.packsTotalCount)\n    const itemsOnPage = useSelector<AppRootStateType, number>((state) => state.packs.requestParams.pageCount!)\n    const page = useSelector<AppRootStateType, number>((state) => state.packs.requestParams.page!)\n\n    const columns = useMemo(() => [\n        {id: 1, title: 'Name', icons: [<UpIcon size='15'/>, <DownIcon size='15'/>], sort: [SortDirection.nameUp, SortDirection.nameDown]},\n        {id: 2, title: 'Cards count', icons: [<UpIcon size='15'/>, <DownIcon size='15'/>], sort: [SortDirection.countUp, SortDirection.countDown]},\n        {id: 3, title: 'Updated', icons: [<UpIcon size='15'/>, <DownIcon size='15'/>], sort: [SortDirection.updateUp, SortDirection.updateDown]},\n        {id: 4, title: 'Action'},\n        {id: 5, title: 'Cards'}\n    ], [])\n\n    const packsRows = useMemo(() => packs, [packs])\n\n\n    useEffect(() => {\n        dispatch(getPacksTC(requestParams))\n    }, [])\n\n    // useEffect(() => {\n    //     setTimeout(() => setCurrentPage(page), 1000) \n    // }, [page])\n\n    useEffect(() => {\n        window.scrollTo(0, 0)\n    }, [itemsOnPage])\n\n\n    const onAddNewPack = () => {\n        setModalAddShow(true)\n    }\n\n    const onPackDelete = (packId: string) => {\n        setModalData({packId})\n        setModalDeleteShow(true)\n    }\n\n    const onUpdatePack = (packId: string, packName: string) => {\n        setModalData({packId, packName})\n        setModalEditShow(true)\n    }\n\n    const searchByNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setSearchName(e.currentTarget.value)\n    }\n    const onSearchClick = () => {\n        dispatch(getPacksTC({packName: searchName}))\n        setSearchName('')\n    }\n\n    const onSortClick = (SortDirection: string) => { \n        dispatch(getPacksTC({sortPacks: SortDirection, page: 1}))\n    }\n\n    const onPageChange = (pageNumber: number) => {\n        setCurrentPage(pageNumber)\n        dispatch(getPacksTC({page: pageNumber}))\n    }\n\n    const onItemsCountChange = (e: ChangeEvent<HTMLSelectElement>) => {\n        dispatch(getPacksTC({pageCount: +e.currentTarget.value}))\n    }\n\n    if(!isLoggedIn){\n        return <Redirect to='/login'/>\n    }\n\n\n    return (\n        <>\n        <div className={s.header}>\n                <div className={s.search__title}><span>Search pack</span></div>\n                <div className={s.search__field}>\n                    <input \n                    type='text'\n                    placeholder='Search by name' \n                    onChange={searchByNameHandler}\n                    value={searchName}/>\n                </div>\n                <div className={s.search__btn}>\n                    <button onClick={onSearchClick}>Search</button>\n                </div>\n                <div className={s.add}>\n                    <button onClick={onAddNewPack}><AddIcon size='25'/><span>Add new cardspack</span></button>\n                </div>\n            </div>\n            <table className={s.table}>\n                <thead>\n                    <tr>\n                        {columns.map((column) => {\n                            return (\n                                <th key={column.id}>\n                                    {column.icons ?\n                                        <div className={s.table__title}>\n                                        <span>{column.title}</span>\n                                        <div className={s.title__icons}>\n                                            <span onClick={() => onSortClick(column.sort[0])}>{column.icons && column.icons[0]}</span>\n                                            <span onClick={() => onSortClick(column.sort[1])}>{column.icons && column.icons[1]}</span>\n                                        </div>\n                                    </div>\n                                    : <span>{column.title}</span>} \n                                </th>) \n                            })\n                        }\n                    </tr>\n                </thead>\n                <tbody>\n                        {packsRows.map((row) => (\n                            <tr key={row._id}>\n                                <td>{row.name}</td>\n                                <td>{row.cardsCount}</td>\n                                <td>{row.updated}</td>\n                                <td>\n                                    <div className={s.action__btns}>\n                                        <EditIcon className={s.action__btn} size='25' onClick={() => onUpdatePack(row._id, row.name)}/>\n                                        <DeleteIcon className={s.action__btn} size='27' onClick={() => onPackDelete(row._id)}/>\n                                    </div>\n                                </td> \n                                <td><NavLink to={`/cards/${row._id}`}>Cards</NavLink></td>\n                            </tr>\n                        ))}\n                </tbody>\n            </table> \n            <div className={s.table__footer}>\n                <Paginator \n                    totalItemsCount={packsTotalCount}\n                    itemsOnPage={itemsOnPage}\n                    currentPage={currentPage}\n                    onPageChange={onPageChange}\n                />\n                <div className={s.footer__select}>\n                    <Select \n                        onSelectValue={onItemsCountChange}\n                        selectValues={[10, 25, 50, 100]}\n                    />\n                </div>\n                <AddPackModal \n                    show={modalAddShow}\n                    setShow={setModalAddShow}\n                />\n                <ModalDeletePack \n                    show={modalDeleteShow}\n                    setShow={setModalDeleteShow}\n                    packId={modalData.packId}\n                />\n                <ModalEditPack \n                    show={modalEditShow}\n                    setShow={setModalEditShow}\n                    packId={modalData.packId}\n                    packName={modalData.packName!}\n                />\n                <AlertPopup message={serverErrorMessage}/>  \n            </div>   \n        </>\n    )\n}\n\nexport default Packs\n\n// types\n\ntype ModalDataType = {\n    packId: string\n    packName?: string\n}","export default __webpack_public_path__ + \"static/media/idea.8d41dc1a.gif\";","import { AppRootStateType } from './../store';\nimport { ThunkDispatch, ThunkAction } from 'redux-thunk';\nimport { cardsAPI, GetCardsRequestType } from './../../api/api';\nimport { CardType } from \"../../api/api\"\n\nconst initialState: InitialStateType = {\n    cards: [],\n    cardsTotalCount: 0,\n    error: '',\n    requestParams: {\n        cardQuestion: '',\n        cardsPack_id: '',\n        min: 0,\n        max: 0,\n        page: 1,\n        pageCount: 9\n    },\n    isCardActionSuccess: false\n}\n\nexport const cardsReducer = (state: InitialStateType = initialState, action: CardsActionsType) => {\n    switch(action.type){\n\n        case 'cards/SET_CARDS':\n            return {\n                ...state,\n                cards: action.cards,\n                cardsTotalCount: action.cardsTotalCount\n            }\n\n        case 'cards/UPDATE_REQUEST_PARAMS': \n            return {\n                ...state,\n                requestParams: {...state.requestParams, ...action.newParams}\n            }\n\n        case 'cards/SET_ERROR_MESSAGE':\n            return {\n                ...state,\n                error: action.errorMessage\n            } \n\n        case 'cards/SET_CARD_ACTION_STATUS':\n            return {\n                ...state,\n                isCardActionSuccess: action.isSuccess\n            }\n\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setCardsAC = (cards: Array<CardType>, cardsTotalCount: number) => ({type: 'cards/SET_CARDS', cards, cardsTotalCount} as const)\nconst updateRequestParamsAC = (newParams: GetCardsRequestType) => ({type: 'cards/UPDATE_REQUEST_PARAMS', newParams} as const)\nconst setErrorMessageAC = (errorMessage: string) => ({type: 'cards/SET_ERROR_MESSAGE', errorMessage} as const)\n// export const cardDeleteStatusAC = (isDelete: boolean) => ({type: 'cards/SET_CARD_DELETE_STATUS', isDelete} as const)\n// export const cardUpdateStatusAC = (isUpdate: boolean) => ({type: 'cards/SET_CARD_UPDATE_STATUS', isUpdate} as const)\nexport const cardActionStatusAC = (isSuccess: boolean) => ({type: 'cards/SET_CARD_ACTION_STATUS', isSuccess} as const)\n\n// thunks\nexport const getCardsTC = (params: GetCardsRequestType): ThunkType => {\n    return async (dispatch: DispatchType, getState: () => AppRootStateType) => {\n        try{\n            dispatch(updateRequestParamsAC(params))\n            const newParams = getState().cards.requestParams\n            const {data} = await cardsAPI.getCards(newParams)\n            dispatch(setCardsAC(data.cards, data.cardsTotalCount))\n        } catch(e){\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\nexport const deleteCardTC = (cardId: string, cardPackId: string): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            await cardsAPI.deleteCard(cardId)\n            dispatch(cardActionStatusAC(true))\n            dispatch(getCardsTC({cardsPack_id: cardPackId}))\n        } catch(e){\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\nexport const addCardTC = (data: {cardsPack_id: string, answer: string, question: string}): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            await cardsAPI.addCard(data)\n            dispatch(cardActionStatusAC(true))\n            dispatch(getCardsTC({cardsPack_id: data.cardsPack_id}))\n        } catch(e){\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\nexport const updateCardTC = (data: {_id: string, question?: string, answer?: string, cardsPack_id: string}): ThunkType => {\n    return async (dispatch: DispatchType) => {\n        try{\n            await cardsAPI.updateCard(data)\n            dispatch(cardActionStatusAC(true))\n            dispatch(getCardsTC({cardsPack_id: data.cardsPack_id}))\n        } catch(e){\n            dispatch(setErrorMessageAC(e.response ? e.response.data.error : e.message))\n            dispatch(setErrorMessageAC(''))\n        }\n    }\n}\n\n// types\ntype InitialStateType = {\n    cards: Array<CardType>\n    cardsTotalCount: number\n    error: string\n    requestParams: GetCardsRequestType\n    // isCardDelete: boolean\n    // isCardUpdate: boolean\n    isCardActionSuccess: boolean\n}\n\nexport type CardsActionsType = \n| ReturnType<typeof setCardsAC>\n| ReturnType<typeof updateRequestParamsAC>\n| ReturnType<typeof setErrorMessageAC>\n| ReturnType<typeof cardActionStatusAC>\n\n\ntype DispatchType = ThunkDispatch<AppRootStateType, unknown, CardsActionsType>\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, CardsActionsType>","import React from 'react'\nimport ModalPopup from '../../../components/ModalPopup/ModalPopup'\n\nconst CardInfoModal: React.FC<PropsType> = ({show, setShow, question, answer}) => {\n    return (\n        <div>\n            <ModalPopup show={show} setShow={setShow}>\n                {\n                    <>\n                    <div>{question}</div>\n                    <div>{answer}</div>\n                    </>\n                }\n            </ModalPopup>\n        </div>\n    )\n}\n\ntype PropsType = {\n    show: boolean\n    setShow: (value: boolean) => void\n    question: string\n    answer: string\n}\n\nexport default CardInfoModal\n","import React, { useState, useEffect, ChangeEvent } from 'react'\nimport ModalPopup from '../../../components/ModalPopup/ModalPopup'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { deleteCardTC, updateCardTC, cardActionStatusAC } from '../../../redux/cards-reducer/cards-reducer'\nimport { AppRootStateType } from '../../../redux/store'\n\nconst CardEditModal: React.FC<PropsType> = (props) => {\n\n    const {\n        show,\n        setShow,\n        cardPackId,\n        cardId,\n        question,\n        answer\n    } = props\n\n    const dispatch = useDispatch()\n\n    const successDelete = useSelector<AppRootStateType, boolean>((state) => state.cards.isCardActionSuccess)\n    const successUpdate = useSelector<AppRootStateType, boolean>((state) => state.cards.isCardActionSuccess)\n\n    const [cardQuestion, setCardQuestion] = useState<string>('')\n    const [cardAnswer, setCardAnswer] = useState<string>('')\n\n    useEffect(() => {\n        setCardQuestion(question)\n    }, [question])\n\n    useEffect(() => {\n        setCardAnswer(answer)\n    }, [answer])\n\n    useEffect(() => {\n        setShow(false)\n        dispatch(cardActionStatusAC(false))\n    }, [successDelete])\n\n    useEffect(() => {\n        setShow(false)\n        dispatch(cardActionStatusAC(false))\n    }, [successUpdate])\n\n\n    const questionEditHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setCardQuestion(e.currentTarget.value)\n    }\n\n    const answerEditHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setCardAnswer(e.currentTarget.value)\n    }\n\n    const onUpdateCardInfo = () => {\n        dispatch(updateCardTC({_id: cardId, question: cardQuestion, answer: cardAnswer, cardsPack_id: cardPackId}))\n    }\n\n    const onCardDelete = () => {\n        dispatch(deleteCardTC(cardId, cardPackId))\n    }\n\n    return (\n        <div>\n            <ModalPopup show={show} setShow={setShow}>\n                {\n                    <>\n                        <div><input onChange={questionEditHandler} value={cardQuestion}/></div>\n                        <div><input onChange={answerEditHandler} value={cardAnswer}/></div>\n                        <div><button onClick={onUpdateCardInfo}>UPDATE</button></div>\n                        <div><button onClick={onCardDelete}>DELETE</button></div>\n                    </>\n                }\n            </ModalPopup>\n        </div>\n    )\n}\n\nexport default CardEditModal\n\ntype PropsType = {\n    show: boolean\n    setShow: (value: boolean) => void \n    cardPackId: string\n    cardId: string\n    question: string\n    answer: string\n}","import React, { useState, useEffect, ChangeEvent } from 'react'\nimport ModalPopup from '../../../components/ModalPopup/ModalPopup'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addCardTC, cardActionStatusAC } from '../../../redux/cards-reducer/cards-reducer'\nimport { AppRootStateType } from '../../../redux/store'\n\nconst CardAddModal: React.FC<PropsType> = ({show, setShow, cardPackId}) => {\n\n    const dispatch = useDispatch()\n\n    const [question, setQuestion] = useState<string>('')\n    const [answer, setAnswer] = useState<string>('')\n\n    const isAddCardSuccess = useSelector<AppRootStateType, boolean>((state) => state.cards.isCardActionSuccess)\n\n    useEffect(() => {\n        setShow(false)\n        dispatch(cardActionStatusAC(false))\n        setQuestion('')\n        setAnswer('')\n    }, [isAddCardSuccess])\n   \n\n    const questionEditHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setQuestion(e.currentTarget.value)\n    }\n\n    const answerEditHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setAnswer(e.currentTarget.value)\n    }\n    const onAddNewCard = () => {\n        dispatch(addCardTC({cardsPack_id: cardPackId, question, answer}))\n    }\n\n    return (\n        <div>\n            <ModalPopup show={show} setShow={setShow}>\n                {\n                    <>\n                        <div><input onChange={questionEditHandler} value={question}/></div>\n                        <div><input onChange={answerEditHandler} value={answer}/></div>\n                        <div><button onClick={onAddNewCard}>ADD</button></div>\n                    </>\n                }\n            </ModalPopup>\n        </div>\n    )\n}\n\ntype PropsType = {\n    show: boolean\n    setShow: (value: boolean) => void\n    cardPackId: string\n}\n\nexport default CardAddModal\n","import React, { useEffect, useState, ChangeEvent } from 'react'\nimport s from './Cards.module.css'\nimport ideaGif from '../../assets/img/idea.gif'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { CardType } from '../../api/api'\nimport { AppRootStateType } from '../../redux/store'\nimport { getCardsTC, addCardTC } from '../../redux/cards-reducer/cards-reducer'\nimport { MdAddCircleOutline as AddIcon } from 'react-icons/md'\nimport { useParams } from 'react-router-dom'\nimport Paginator from '../../components/Paginator/Paginator'\nimport Select from '../../components/Select/Select'\nimport CardInfoModal from './modals/CardInfoModal'\nimport { FiEdit as EditIcon } from 'react-icons/fi'\nimport CardEditModal from './modals/CardEditModal'\nimport AddCardModal from './modals/AddCardModal'\n\nconst Cards = () => {\n    \n    const dispatch = useDispatch()\n    const {id} = useParams<{id: string}>()\n    const cardPackId = id\n\n    const [foundQuestion, setFoundQuestion] = useState<string>('')\n    const [currentPage, setCurrentPage] = useState<number>(1)\n    const [modalInfoShow, setModalInfoShow] = useState<boolean>(false)\n    const [modalData, setModalData] = useState<ModalDataType>({} as ModalDataType)\n    const [modalEditShow, setModalEditShow] = useState<boolean>(false)\n    const [modalAddShow, setModalAddShow] = useState<boolean>(false)\n\n    const cards = useSelector<AppRootStateType, CardType[]>((state) => state.cards.cards)\n    const cardsTotalCount = useSelector<AppRootStateType, number>((state) => state.cards.cardsTotalCount)\n    const itemsOnPage = useSelector<AppRootStateType, number>((state) => state.cards.requestParams.pageCount!)\n\n\n    useEffect(() => {\n        dispatch(getCardsTC({cardsPack_id: cardPackId}))\n    }, [])\n\n    useEffect(() => {\n        window.scrollTo(0, 0)\n    }, [itemsOnPage])\n\n\n    const sliceAnswer = (string: string) => {\n        if(string.length > 70) return string.slice(0, 70) + '...'\n        return string\n    }\n\n    const sliceQuestion = (string: string) => {\n        if(string.length > 48) return string.slice(0, 48) + '...'\n        return string\n    }\n\n    const checkOnNotInteger = (value: number) => {\n        if(value % 1 !== 0) return value.toFixed(2)\n        return value\n    }\n\n\n    const searchByQuestionHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setFoundQuestion(e.currentTarget.value)\n    }\n\n    const onSearchClick = () => {\n        dispatch(getCardsTC({cardsPack_id: cardPackId, cardQuestion: foundQuestion}))\n    }\n\n    const onAddNewCard = () => {\n        setModalAddShow(true)\n    }\n\n    const onPageChange = (pageNumber: number) => {\n        setCurrentPage(pageNumber)\n        dispatch(getCardsTC({cardsPack_id: cardPackId, page: pageNumber}))\n    }\n\n    const onItemsCountChange = (e: ChangeEvent<HTMLSelectElement>) => {\n        dispatch(getCardsTC({cardsPack_id: cardPackId, pageCount: +e.currentTarget.value}))\n    }\n\n    const onClickInfo = (question: string, answer: string) => {\n        setModalInfoShow(true)\n        setModalData({question, answer})\n    }\n\n    const onEditCard = (cardId: string, question: string, answer: string) => {\n        setModalEditShow(true)\n        setModalData({cardId, question, answer})\n    }\n\n    return (\n        <div>\n            <div className={s.header}>\n                <div className={s.search__title}><span>Search card</span></div>\n                <div className={s.search__field}>\n                    <input \n                    type='text'\n                    placeholder='Search by name' \n                    onChange={searchByQuestionHandler}\n                    value={foundQuestion}/>\n                </div>\n                <div className={s.search__btn}>\n                    <button onClick={onSearchClick}>Search</button>\n                </div>\n                <div className={s.add}>\n                    <button onClick={onAddNewCard}><AddIcon size='25'/><span>Add new card</span></button>\n                </div>\n            </div>\n            <div className={s.cards}>\n                {cards.map((card) => (\n                    <div key={card._id} className={s.card__outer}>\n                        <div className={s.card__inner}>\n                            <div className={s.card__img}><img  src={ideaGif}/></div>\n                            <div className={s.card__title}>{sliceQuestion(card.question)}</div>\n                            <div className={s.card__subtitle}>{sliceAnswer(card.answer)}</div>\n                            <div className={s.card__rate}>Your rate</div>\n                            <div className={s.card__stars}>{checkOnNotInteger(card.grade)}</div>\n                            <div className={s.card__buttons}>\n                                <button className={s.card__info_btn} onClick={() => onClickInfo(card.question, card.answer)}>Click for info</button>\n                                <div><EditIcon className={s.card__edit_btn} size='28' onClick={() => onEditCard(card._id, card.question, card.answer)}/></div>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <div className={s.cards__footer}>\n                <Paginator \n                    totalItemsCount={cardsTotalCount}\n                    itemsOnPage={itemsOnPage}\n                    currentPage={currentPage}\n                    onPageChange={onPageChange}\n                />\n                <div className={s.footer__select}>\n                    <Select \n                        onSelectValue={onItemsCountChange}\n                        selectValues={[9, 15, 30, 45, 99]}\n                    />\n                </div>\n            </div>\n            <CardInfoModal \n                show={modalInfoShow}\n                setShow={setModalInfoShow}\n                question={modalData.question}\n                answer={modalData.answer}\n            />\n            <CardEditModal \n                show={modalEditShow}\n                setShow={setModalEditShow}\n                cardPackId={cardPackId}\n                cardId={modalData.cardId!}\n                question={modalData.question}\n                answer={modalData.answer}\n            />\n            <AddCardModal\n                show={modalAddShow}\n                setShow={setModalAddShow}\n                cardPackId={cardPackId}\n            />\n        </div>\n    )\n}\n\nexport default Cards\n\n\n// types\ntype ModalDataType = {\n    question: string\n    answer: string\n    cardId?: string\n} ","import React, { useEffect } from 'react'\nimport './App.css';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Login from '../features/login/Login';\nimport Registration from '../features/registration/Registration'\nimport Header from '../components/Header/Header';\nimport ForgotPasswordForm from \"../features/forgot-password/ForgotPasswordForm\";\nimport NewPassword from \"../features/new-password/NewPassword\";\nimport Profile from '../features/profile/Profile';\nimport { AppRootStateType } from '../redux/store';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { appInicializeTC } from '../redux/app-reducer/app-reducer';\nimport Preloader from '../components/Preloader/Preloader';\nimport Packs from '../features/packs/Packs';\nimport RangeSlider from '../components/RangeSlider/RangeSlider'\nimport Cards from '../features/cards/Cards';\nimport Learn from '../features/learn/Learn';\n// import { Test } from '../components/ModalPopup/ModalPopup';\n\n\nconst App = () => {\n\n  const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\n  const isAppInicialized = useSelector<AppRootStateType, boolean>((state) => state.app.isAppInicialized)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(appInicializeTC())\n  }, [])\n\n\n  return (\n   <>\n   <Header />\n    {isAppInicialized \n      ? <div className='container'>     \n            <Switch>\n              <Route path='/login' render={() => <Login />}/>\n              <Route path='/registration' render={() => <Registration />}/>\n              <Route path='/profile' render={() => <Profile />}/>\n              <Route path='/forgotpassword' render={() => <div><ForgotPasswordForm/></div>}/>\n              <Route path='/newpassword' render={() => <div><NewPassword/></div>}/>\n              <Route path='/packs' render={() => <Packs />}/>      \n              <Route path='/cards/:id' render={() => <Cards />}/>  \n              {/* <Route path='/test' render={() => <Test />}/>    */}\n              <Route path='/' render={() => <Profile />}/> \n              <Route path='*' render={() => <div>404 Not Found</div>}/>    \n            </Switch>     \n          </div>\n    : <Preloader />}\n   </>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CardsActionsType, cardsReducer } from './cards-reducer/cards-reducer';\nimport { appReducer, AppActionsType } from './app-reducer/app-reducer';\nimport { passwordReducer, PasswordActionsType } from './password-reducer/password-reducer';\nimport { profileReducer, ProfileActionsType } from './profile-reducer/profile-reducer';\nimport { registrationReducer, RegistrationActionsType } from './registration-reducer/registration-reducer';\nimport { loginReducer, LoginActionsType } from './login-reducer/login-reducer';\nimport { combineReducers, createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from 'redux-thunk'\nimport {ForgotPassActionsType, forgotReducer} from \"./forgot-reducer/forgot-reducer\";\nimport { packsReducer, PacksActionsType } from './packs-reducer/packs-reducer';\n\nconst rootReducer = combineReducers({\n    login: loginReducer,\n    registration: registrationReducer,\n    profile: profileReducer,\n    password: passwordReducer,\n    forgot: forgotReducer,\n    app: appReducer,\n    packs: packsReducer,\n    cards: cardsReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\nexport type AllAppActionsType = \n| LoginActionsType\n| ProfileActionsType\n| RegistrationActionsType\n| ForgotPassActionsType\n| PasswordActionsType\n| AppActionsType\n| PacksActionsType\n| CardsActionsType\n\n\n// @ts-ignore\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <App/>\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// basename={process.env.PUBLIC_URL}"],"sourceRoot":""}